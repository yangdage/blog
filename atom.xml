<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Notes</title>
  
  <subtitle>When you look long into an abyss, the abyss looks into you.</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://yangdage.github.io/"/>
  <updated>2018-05-16T06:57:17.584Z</updated>
  <id>http://yangdage.github.io/</id>
  
  <author>
    <name>yangdage</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>REST API设计最佳实践</title>
    <link href="http://yangdage.github.io/mark/mark/rest-api-design.html"/>
    <id>http://yangdage.github.io/mark/mark/rest-api-design.html</id>
    <published>2018-05-15T16:00:00.000Z</published>
    <updated>2018-05-16T06:57:17.584Z</updated>
    
    <content type="html"><![CDATA[<p>Facebook, Google, Github, Netflix等科技巨头都为开发者和产品提供了API来产生和消费的数据。<br>即使我们写的API不用给其他开发者或者产品使用，我们也应该为我们所开发的代码编写一份精美的API文档。</p><p>关于API设计的最佳方式，网络上一直都存在很多争议，始终没有形成一个统一的标准。</p><p>API就是访问数据的接口，通过它用户可以生产和消费数据。一个好的API应该是简单易懂，开发者使用时不会产生疑惑。反之，如果一个产品有一个冗长而且看了几遍都还无法理解的API，开发者一般会选着放弃或者寻找其他更简单的替代品。<strong>开发者的使用体验是衡量一个API质量的重要指标。</strong></p><p><strong>API就像一个在舞台上表演的演员，用户就是观众</strong></p><h3 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h3><p>以下是几个跟REST API相关的重要术语。</p><ul><li><p>Resource<br><code>Resource</code>表示一组可以被操作的相互关联的数据组成的抽象对象。例如：动物、学校、公司职员可以看做是资源，我们可以针对这些资源进行删除、新增、更新等操作。</p></li><li><p>Collections<br><code>Collections</code>表示一组资源的集合。</p></li><li><p>URL<br><code>URL</code>（统一资源定位符）表示访问和操作指定资源的路径。</p></li></ul><h3 id="API路由"><a href="#API路由" class="headerlink" title="API路由"></a>API路由</h3><p>便于理解，以下列举了一些有关公司和职员的<strong>传统API</strong>示例。</p><p><code>/getAllEmployees</code></p><p><code>/addNewEmployee</code></p><p><code>/updateEmployee</code></p><p><code>/deleteEmployee</code></p><p><code>/promoteEmployee</code></p><p>实际中，还有大量的类似上面定义用于不同操作的的API路由。所有这些定义中都包含了多余的动作。因此，随着数量的增加，这些API将变得非常繁杂和难用。</p><p><strong>错在哪里？</strong></p><p>既然URL表示的是资源，资源应该是名词，而不应该含有动词。<code>/addNewEmployee</code>就包含了<code>addNew</code>的动作在里面。</p><p><strong>最佳实践</strong></p><p><code>资源名称统一使用复数形式</code></p><p><code>/companies</code>这个URL就是一个比较好的示例，那么如何在这个资源上表示出增加、修改、删除的操作呢。</p><p>HTTP方法GET、POST、DELETE、PUT就可以很好的表示这些动作。</p><p><code>GET /companies</code>表示获取所有公司列表</p><p><code>GET /companies/34</code>表示获取ID为34的公司信息</p><p><code>DELETE /companies/34</code>表示删除公司ID为34的信息</p><p><code>POST /companies</code>表示新建一个新的公司信息，并返回所创建的信息</p><p>有时候，我们需要操作资源下的资源，比如要访问或操作公司下的职员信息，可以如下定义API。</p><p><code>GET /companies/3/employees</code>表示获取ID为3的公司下的所有职员信息</p><p><code>GET /companies/3/employees/45</code>表示获取ID为3的公司下ID为45的职员信息</p><p>对于有些HTTP方法表示不了的动作，如解雇、升值、加薪，这种情况可以使用PUT方法和在API的最后附加相关的动作来实现。</p><p><code>PUT /companies/3/employees/45/promote</code></p><h3 id="条件查询、排序、分页"><a href="#条件查询、排序、分页" class="headerlink" title="条件查询、排序、分页"></a>条件查询、排序、分页</h3><p>这些动作都是基于相同资源的查询操作，我们没有必要再重新为每一个动作设计一个新的API，只需要将相关的参数附加到GET方式的API后面即可。</p><p><strong>条件查询</strong></p><p><code>GET /companies?category=banking&amp;location=india</code></p><p><strong>排序</strong></p><p><code>GET /companies?sort=rank_asc</code></p><p><strong>分页</strong></p><p><code>GET /companies?page=23</code></p><p><strong>注：GET方式的请求参数不能太长，太长的话服务器一般会返回一个错误<code>414 URI Too long</code>。这种情况下就需要将GET方式改成POST，并且请求参数放到请求体里面。</strong></p><h3 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h3><p>随着产品的迭代，我们的API可能会用在很多产品中，有时候会做出颠覆性的更新，所以前期就需要针对这些API加上版本标识。</p><p><code>/v1/companies/34/employees</code></p><p><code>/v2/companies/34/employees</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Facebook, Google, Github, Netflix等科技巨头都为开发者和产品提供了API来产生和消费的数据。&lt;br&gt;即使我们写的API不用给其他开发者或者产品使用，我们也应该为我们所开发的代码编写一份精美的API文档。&lt;/p&gt;
&lt;p&gt;关于API设计的最佳方式
      
    
    </summary>
    
      <category term="mark" scheme="http://yangdage.github.io/categories/mark/"/>
    
    
  </entry>
  
  <entry>
    <title>golang问题记录</title>
    <link href="http://yangdage.github.io/mark/go/golang%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95.html"/>
    <id>http://yangdage.github.io/mark/go/golang问题记录.html</id>
    <published>2018-03-28T16:00:00.000Z</published>
    <updated>2018-05-30T06:36:50.399Z</updated>
    
    <content type="html"><![CDATA[<h2 id="map元素值不可寻址"><a href="#map元素值不可寻址" class="headerlink" title="map元素值不可寻址"></a>map元素值不可寻址</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Data <span class="keyword">struct</span> &#123;</div><div class="line">Name <span class="keyword">string</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">mp := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]Data)</div><div class="line">mp[<span class="string">"test"</span>] = Data&#123;&#125;</div><div class="line">mp[<span class="string">"test"</span>].Name = <span class="string">"111"</span></div><div class="line">fmt.Println(mp)</div><div class="line">&#125;</div><div class="line">运行报错</div><div class="line">cannot assign to <span class="keyword">struct</span> field mp[<span class="string">"test"</span>].Name in <span class="keyword">map</span></div></pre></td></tr></table></figure><p>修改成下面即可<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Data <span class="keyword">struct</span> &#123;</div><div class="line">Name <span class="keyword">string</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">mp := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]*Data)</div><div class="line">mp[<span class="string">"test"</span>] = &amp;Data&#123;&#125;</div><div class="line">mp[<span class="string">"test"</span>].Name = <span class="string">"111"</span></div><div class="line">fmt.Printf(<span class="string">"%v\n"</span>, mp)</div><div class="line">&#125;</div><div class="line">输出</div><div class="line"><span class="keyword">map</span>[test:<span class="number">0xc0420461b0</span>]</div></pre></td></tr></table></figure></p><p>map的indexing操作本来就是不可寻址的，这和golang中map的具体实现机制有关，golang中的map并没有保证它们的value值的地址是不可变的，因为value值的地址很有可能被重新分配。一个修改的办法就是把value值设置成为指针的形式，即使真正需要的那个值的位置发生了变化，也可以根据指针值索引过去。</p><h2 id="String-方法中使用fmt占位符-v-v-导致递归死循环"><a href="#String-方法中使用fmt占位符-v-v-导致递归死循环" class="headerlink" title="String()方法中使用fmt占位符(%v/%+v)导致递归死循环"></a>String()方法中使用fmt占位符(%v/%+v)导致递归死循环</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Data <span class="keyword">struct</span> &#123;</div><div class="line">Name <span class="keyword">string</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d Data)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123;</div><div class="line"><span class="keyword">return</span> fmt.Sprintf(<span class="string">"%v"</span>, d)</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">d := Data&#123;Name: <span class="string">"111"</span>&#125;</div><div class="line">d.String()</div><div class="line">&#125;</div><div class="line"></div><div class="line">运行以上代码会报如下堆栈溢出错误</div><div class="line">runtime: goroutine stack exceeds <span class="number">1000000000</span>-<span class="keyword">byte</span> limit</div><div class="line">fatal error: stack overflow</div></pre></td></tr></table></figure><h2 id="简短变量定义方式只能用在函数内部"><a href="#简短变量定义方式只能用在函数内部" class="headerlink" title="简短变量定义方式只能用在函数内部"></a>简短变量定义方式只能用在函数内部</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">a:=<span class="number">111</span></div><div class="line">fmt.Println(a)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>下面的会报错<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a:=<span class="number">111</span><span class="comment">//syntax error: non-declaration statement outside function body</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">fmt.Println(a)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="map使用前需要初始化，slice可以不用"><a href="#map使用前需要初始化，slice可以不用" class="headerlink" title="map使用前需要初始化，slice可以不用"></a>map使用前需要初始化，slice可以不用</h2><p>map示例<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">var</span> mp <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;</div><div class="line">mp[<span class="string">"name"</span>] = <span class="string">"111"</span><span class="comment">//panic: assignment to entry in nil map</span></div><div class="line">fmt.Println(mp)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>slice示例<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">var</span> s []<span class="keyword">int</span></div><div class="line">s = <span class="built_in">append</span>(s, <span class="number">1</span>)</div><div class="line">fmt.Println(s)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="map非线程安全"><a href="#map非线程安全" class="headerlink" title="map非线程安全"></a>map非线程安全</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">mp := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)</div><div class="line"></div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</div><div class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">mp[<span class="string">"name"</span>] = i</div><div class="line">&#125;()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</div><div class="line"><span class="keyword">go</span> fmt.Println(mp[<span class="string">"name"</span>])</div><div class="line">&#125;</div><div class="line"></div><div class="line">&lt;-time.After(<span class="number">2</span> * time.Second)</div><div class="line">&#125;</div><div class="line"></div><div class="line">输出：</div><div class="line">fatal error: concurrent <span class="keyword">map</span> writes</div></pre></td></tr></table></figure><p>这里分别启动了100个读，100个写线程操作同一个map对象，偶尔会出现并发错误。再分别增加读写线程数量到1000，并发错误就是必现的。</p><h2 id="switch-case分支默认会有break，使用fallthrough可以忽略"><a href="#switch-case分支默认会有break，使用fallthrough可以忽略" class="headerlink" title="switch-case分支默认会有break，使用fallthrough可以忽略"></a>switch-case分支默认会有break，使用fallthrough可以忽略</h2><p>默认<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">a := <span class="number">1</span></div><div class="line"><span class="keyword">switch</span> a &#123;</div><div class="line"><span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">fmt.Println(<span class="number">1</span>)</div><div class="line"><span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">fmt.Println(<span class="number">2</span>)</div><div class="line"><span class="keyword">default</span>:</div><div class="line">fmt.Println(<span class="string">"unknow"</span>)</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">输出</div><div class="line"><span class="number">1</span></div></pre></td></tr></table></figure></p><p>使用fallthrough<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">a := <span class="number">1</span></div><div class="line"><span class="keyword">switch</span> a &#123;</div><div class="line"><span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">fmt.Println(<span class="number">1</span>)</div><div class="line"><span class="keyword">fallthrough</span></div><div class="line"><span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">fmt.Println(<span class="number">2</span>)</div><div class="line"><span class="keyword">default</span>:</div><div class="line">fmt.Println(<span class="string">"unknow"</span>)</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">输出 </div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">2</span></div></pre></td></tr></table></figure></p><h2 id="struct首字母小写变量不会被序列化-amp-反序列化"><a href="#struct首字母小写变量不会被序列化-amp-反序列化" class="headerlink" title="struct首字母小写变量不会被序列化&amp;反序列化"></a>struct首字母小写变量不会被序列化&amp;反序列化</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Data <span class="keyword">struct</span> &#123;</div><div class="line">name <span class="keyword">string</span></div><div class="line">Age <span class="keyword">int</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">d := Data&#123;name: <span class="string">"111"</span>,Age:<span class="number">18</span>&#125;</div><div class="line">b, _ := json.Marshal(d)</div><div class="line">fmt.Println(<span class="keyword">string</span>(b))</div><div class="line">&#125;</div><div class="line">输出</div><div class="line">&#123;<span class="string">"Age"</span>:<span class="number">18</span>&#125;</div></pre></td></tr></table></figure><h2 id="被defer的函数的参数会在defer声明时求值"><a href="#被defer的函数的参数会在defer声明时求值" class="headerlink" title="被defer的函数的参数会在defer声明时求值"></a>被defer的函数的参数会在defer声明时求值</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">a := <span class="number">1</span></div><div class="line"><span class="keyword">defer</span> fmt.Println(<span class="string">"defer a:"</span>, a)</div><div class="line">a = <span class="number">2</span></div><div class="line">fmt.Println(<span class="string">"main a:"</span>, a)</div><div class="line">&#125;</div><div class="line">输出</div><div class="line">main a: <span class="number">2</span></div><div class="line"><span class="keyword">defer</span> a: <span class="number">1</span></div></pre></td></tr></table></figure><h2 id="函数传参map、slice、channel、指针类型为引用传递-数组为值复制"><a href="#函数传参map、slice、channel、指针类型为引用传递-数组为值复制" class="headerlink" title="函数传参map、slice、channel、指针类型为引用传递,数组为值复制"></a>函数传参map、slice、channel、指针类型为引用传递,数组为值复制</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">arr := [<span class="number">3</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</div><div class="line"><span class="comment">//函数传参，数组为值复制</span></div><div class="line"><span class="function"><span class="keyword">func</span><span class="params">(arr [3]<span class="keyword">int</span>)</span></span> &#123;</div><div class="line">arr[<span class="number">0</span>] = <span class="number">0</span></div><div class="line">fmt.Println(arr) <span class="comment">//输出：[0 2 3]</span></div><div class="line">&#125;(arr)</div><div class="line">fmt.Println(arr) <span class="comment">//输出：[1 2 3]</span></div><div class="line"></div><div class="line"><span class="comment">//使用数组指针实现引用传参</span></div><div class="line"><span class="function"><span class="keyword">func</span><span class="params">(arr *[3]<span class="keyword">int</span>)</span></span> &#123;</div><div class="line">arr[<span class="number">0</span>] = <span class="number">0</span></div><div class="line">fmt.Println(*arr) <span class="comment">//输出：[0 2 3]</span></div><div class="line">&#125;(&amp;arr)</div><div class="line">fmt.Println(arr) <span class="comment">//输出：[0 2 3]</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="map中取不存在的key的值为“0”值"><a href="#map中取不存在的key的值为“0”值" class="headerlink" title="map中取不存在的key的值为“0”值"></a>map中取不存在的key的值为“0”值</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">mp := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)</div><div class="line">mp[<span class="string">"111"</span>] = <span class="number">1</span></div><div class="line">fmt.Println(mp[<span class="string">"000"</span>]) <span class="comment">//输出：0</span></div><div class="line"></div><div class="line"><span class="comment">// 判断是否存在，最好使用下面方式判断ok的值</span></div><div class="line"><span class="keyword">if</span> v, ok := mp[<span class="string">"111"</span>]; ok &#123;</div><div class="line">fmt.Println(v) <span class="comment">//输出：1</span></div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="nil值的interface-不一定等于nil"><a href="#nil值的interface-不一定等于nil" class="headerlink" title="nil值的interface{}不一定等于nil"></a>nil值的interface{}不一定等于nil</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">var</span> data *<span class="keyword">int</span></div><div class="line"><span class="keyword">var</span> v <span class="keyword">interface</span>&#123;&#125;</div><div class="line"></div><div class="line">fmt.Println(data, data == <span class="literal">nil</span>) <span class="comment">//&lt;nil&gt; true</span></div><div class="line">fmt.Println(v, v == <span class="literal">nil</span>)       <span class="comment">//&lt;nil&gt; true</span></div><div class="line"></div><div class="line">v = data</div><div class="line">fmt.Println(v, v == <span class="literal">nil</span>) <span class="comment">//&lt;nil&gt; false</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在golang中，nil只能赋值给指针、channel、func、interface、map或slice类型的变量。</p><p>interface{}表示任意类型，可以接收任意类型的值。interface{}变量在底是由类型和值两部分组成，表示为(T,V)，interface{}变量比较特殊，判断它是nil时，要求它的类型和值都是nil，即(nil, nil)。<br>其它类型变量，只要值是nil，那么此变量就是nil（为什么？变量类型不是nil，那当然只能用值来判断了）</p><p>声明变量interface{}，它默认就是nil，底层类型与值表示是(nil, nil)。<br>当任何类型T的变量值V给interface{}变量赋值时，interface{}变量的底层表示是(T, V)。只要T非nil，即使V是nil，interface{}变量也不是nil。</p><h2 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h2><p>go语言自带了内存回收机制，因此一般情况下不会存在内存泄漏问题。但是以下两种常用情况很容易导致内存泄漏。</p><p><strong>数组引用切片</strong><br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">dataMap := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>][]<span class="keyword">byte</span>)</div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</div><div class="line">fileName := <span class="string">"./main.go"</span></div><div class="line">data, err := ioutil.ReadFile(fileName)</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="built_in">panic</span>(err)</div><div class="line">&#125;</div><div class="line">dataMap[fileName] = data[<span class="number">0</span>:]</div><div class="line">&#125;</div><div class="line"></div><div class="line">fmt.Printf(<span class="string">"%v"</span>, dataMap)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>解决方案：克隆一份数据</strong><br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">dataMap := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>][]<span class="keyword">byte</span>)</div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</div><div class="line">fileName := <span class="string">"./main.go"</span></div><div class="line">data, err := ioutil.ReadFile(fileName)</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="built_in">panic</span>(err)</div><div class="line">&#125;</div><div class="line">dataMap[fileName] = <span class="built_in">append</span>([]<span class="keyword">byte</span>&#123;&#125;,data[<span class="number">0</span>:]...)</div><div class="line">&#125;</div><div class="line"></div><div class="line">fmt.Printf(<span class="string">"%v"</span>, dataMap)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>goroutine不能正常退出</strong><br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">ch := <span class="function"><span class="keyword">func</span><span class="params">()</span> &lt;-<span class="title">chan</span> <span class="title">int</span></span> &#123;</div><div class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</div><div class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; ; i++ &#123;</div><div class="line">ch &lt;- i</div><div class="line">&#125;</div><div class="line">&#125;()</div><div class="line"><span class="keyword">return</span> ch</div><div class="line">&#125;()</div><div class="line"></div><div class="line"><span class="keyword">for</span> v := <span class="keyword">range</span> ch &#123;</div><div class="line">fmt.Println(v)</div><div class="line"><span class="keyword">if</span> v == <span class="number">5</span> &#123;</div><div class="line"><span class="keyword">break</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>解决方案：引入Context或者自定义通知channel</strong><br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">ctx, cancel := context.WithCancel(context.Background())</div><div class="line">ch := <span class="function"><span class="keyword">func</span><span class="params">()</span> &lt;-<span class="title">chan</span> <span class="title">int</span></span> &#123;</div><div class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</div><div class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; ; i++ &#123;</div><div class="line"><span class="keyword">select</span> &#123;</div><div class="line"><span class="keyword">case</span> &lt;-ctx.Done():</div><div class="line"><span class="keyword">return</span></div><div class="line"><span class="keyword">case</span> ch &lt;- i:</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;()</div><div class="line"><span class="keyword">return</span> ch</div><div class="line">&#125;()</div><div class="line"></div><div class="line"><span class="keyword">for</span> v := <span class="keyword">range</span> ch &#123;</div><div class="line">fmt.Println(v)</div><div class="line"><span class="keyword">if</span> v == <span class="number">5</span> &#123;</div><div class="line">cancel()</div><div class="line"><span class="keyword">break</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>或<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">done := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)</div><div class="line">ch := <span class="function"><span class="keyword">func</span><span class="params">()</span> &lt;-<span class="title">chan</span> <span class="title">int</span></span> &#123;</div><div class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</div><div class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; ; i++ &#123;</div><div class="line"><span class="keyword">select</span> &#123;</div><div class="line"><span class="keyword">case</span> &lt;-done:</div><div class="line"><span class="keyword">return</span></div><div class="line"><span class="keyword">case</span> ch &lt;- i:</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;()</div><div class="line"><span class="keyword">return</span> ch</div><div class="line">&#125;()</div><div class="line"></div><div class="line"><span class="keyword">for</span> v := <span class="keyword">range</span> ch &#123;</div><div class="line">fmt.Println(v)</div><div class="line"><span class="keyword">if</span> v == <span class="number">5</span> &#123;</div><div class="line">done &lt;- <span class="literal">true</span></div><div class="line"><span class="keyword">break</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;map元素值不可寻址&quot;&gt;&lt;a href=&quot;#map元素值不可寻址&quot; class=&quot;headerlink&quot; title=&quot;map元素值不可寻址&quot;&gt;&lt;/a&gt;map元素值不可寻址&lt;/h2&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;
      
    
    </summary>
    
      <category term="mark" scheme="http://yangdage.github.io/categories/mark/"/>
    
    
  </entry>
  
  <entry>
    <title>Windows下使用make命令</title>
    <link href="http://yangdage.github.io/mark/mark/use-make-in-windows.html"/>
    <id>http://yangdage.github.io/mark/mark/use-make-in-windows.html</id>
    <published>2018-02-28T16:00:00.000Z</published>
    <updated>2018-03-01T09:29:29.158Z</updated>
    
    <content type="html"><![CDATA[<h3 id="准备工具"><a href="#准备工具" class="headerlink" title="准备工具"></a>准备工具</h3><ul><li>git安装程序</li><li>make工具包</li></ul><h2 id="下载安装最新的git工具"><a href="#下载安装最新的git工具" class="headerlink" title="下载安装最新的git工具"></a>下载安装最新的git工具</h2><p><a href="https://git-scm.com/downloads" target="_blank" rel="external">git工具下载地址</a><br>下载最新的git可执行安装程序直接安装即可。<br>由于Windows上git bash终端是基于MIMGW，MIMGW是一个简单版的Linux命令行工具，可以执行一些基本的Linux命令。但是没有集成make工具，所以要手动安装。</p><h2 id="下载安装make工具包"><a href="#下载安装make工具包" class="headerlink" title="下载安装make工具包"></a>下载安装make工具包</h2><p><a href="">make工具包下载地址</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;准备工具&quot;&gt;&lt;a href=&quot;#准备工具&quot; class=&quot;headerlink&quot; title=&quot;准备工具&quot;&gt;&lt;/a&gt;准备工具&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;git安装程序&lt;/li&gt;
&lt;li&gt;make工具包&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;下载安装最新的git工具
      
    
    </summary>
    
      <category term="mark" scheme="http://yangdage.github.io/categories/mark/"/>
    
    
  </entry>
  
  <entry>
    <title>golang闭包问题</title>
    <link href="http://yangdage.github.io/go/go/golang%E9%97%AD%E5%8C%85%E9%97%AE%E9%A2%98.html"/>
    <id>http://yangdage.github.io/go/go/golang闭包问题.html</id>
    <published>2017-05-31T16:00:00.000Z</published>
    <updated>2017-09-30T07:17:27.059Z</updated>
    
    <content type="html"><![CDATA[<p>关于闭包，网上有这样一句描述</p><p><strong>“类是有行为的数据，而闭包是有数据的行为”</strong></p><p>说的通俗一点：闭包是有上下文的</p><p>下面是一段程序的示例<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    arr := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</div><div class="line">    <span class="keyword">for</span> _, x := <span class="keyword">range</span> arr &#123;</div><div class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">            fmt.Println(x)</div><div class="line">        &#125;()</div><div class="line">    &#125;</div><div class="line">    &lt;-time.After(<span class="number">1</span> * time.Second)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>运行上面的程序，会有多种输出结果</p><blockquote><p>4<br>3<br>4<br>4</p></blockquote><p>或者</p><blockquote><p>4<br>4<br>4<br>4</p></blockquote><p>等等…</p><p>for循环里每次遍历都会启动一个goroutine执行匿名函数打印变量x的值，x是4个goroutine共享的外部变量。随着main线程for循环的执行，x的值也会随着修改。</p><p>由于闭包中使用的非参数传递变量属于引用传递，所以4个goroutine中都是使用的是外部变量x的引用，因此输出x的值自然也就具有了不确定性。</p><p>如果想要4个goroutine分别输出1,2,3,4，只需要将x传递方式改成参数传递即可，修改如下<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    arr := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</div><div class="line">    <span class="keyword">for</span> _, x := <span class="keyword">range</span> arr &#123;</div><div class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(x <span class="keyword">int</span>)</span></span> &#123;</div><div class="line">            fmt.Println(x)</div><div class="line">        &#125;(x)</div><div class="line">    &#125;</div><div class="line">    &lt;-time.After(<span class="number">1</span> * time.Second)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这样每个goroutine中的x都是值传递，值也不相同，避免了使用闭包时引用外部变量导致的莫名其妙问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;关于闭包，网上有这样一句描述&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“类是有行为的数据，而闭包是有数据的行为”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;说的通俗一点：闭包是有上下文的&lt;/p&gt;
&lt;p&gt;下面是一段程序的示例&lt;br&gt;&lt;figure class=&quot;highlight golang&quot;
      
    
    </summary>
    
      <category term="go" scheme="http://yangdage.github.io/categories/go/"/>
    
    
  </entry>
  
  <entry>
    <title>golang时区转换问题</title>
    <link href="http://yangdage.github.io/go/go/golang%E6%97%B6%E5%8C%BA%E8%BD%AC%E6%8D%A2%E9%97%AE%E9%A2%98.html"/>
    <id>http://yangdage.github.io/go/go/golang时区转换问题.html</id>
    <published>2017-03-31T16:00:00.000Z</published>
    <updated>2017-04-01T06:58:46.524Z</updated>
    
    <content type="html"><![CDATA[<h3 id="time-Parse默认转换时间为UTC时区"><a href="#time-Parse默认转换时间为UTC时区" class="headerlink" title="time.Parse默认转换时间为UTC时区"></a>time.Parse默认转换时间为UTC时区</h3><p>golang中转换时间的时候都是习惯性的直接使用time.Parse()函数，没有注意这个函数转换出来的时间默认会是UTC国际标准时间。</p><p>这个时间是伦敦时间时间为准，中国大陆、中国香港、中国澳门、中国台湾、蒙古国、新加坡、马来西亚、菲律宾、西澳大利亚州的时间与UTC的时差均为+8，也就是UTC+8。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">t1, _ := time.Parse(<span class="string">"2006-01-02 15:04:05"</span>, <span class="string">"2017-04-01 13:02:01"</span>)</div><div class="line">t2, _ := time.ParseInLocation(<span class="string">"2006-01-02 15:04:05"</span>, <span class="string">"2017-04-01 13:02:01"</span>, time.Local)</div><div class="line"><span class="comment">//结果:Parse:8</span></div><div class="line">fmt.Printf(<span class="string">"Parse:%v\n"</span>, t1.Sub(t2).Seconds() / <span class="number">3600</span>)</div></pre></td></tr></table></figure><p>以上结果Parse函数转换的时间是跟本地时间相差了8个小时。</p><p>如果有需求计算两个时间间隔的，最好使用ParseInLocation函数转换成本地时区的时间进行计算。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;time-Parse默认转换时间为UTC时区&quot;&gt;&lt;a href=&quot;#time-Parse默认转换时间为UTC时区&quot; class=&quot;headerlink&quot; title=&quot;time.Parse默认转换时间为UTC时区&quot;&gt;&lt;/a&gt;time.Parse默认转换时间为UTC
      
    
    </summary>
    
      <category term="go" scheme="http://yangdage.github.io/categories/go/"/>
    
    
  </entry>
  
  <entry>
    <title>MySql存储引擎</title>
    <link href="http://yangdage.github.io/mark/mark/mysql-engines.html"/>
    <id>http://yangdage.github.io/mark/mark/mysql-engines.html</id>
    <published>2016-05-16T16:00:00.000Z</published>
    <updated>2018-05-17T13:02:18.095Z</updated>
    
    <content type="html"><![CDATA[<h3 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h3><p>存储引擎就是针对如何存储数据、如何针对存储的数据进行增删改查而实现的一堆技术组合。目前主流的数据库还是关系型的数据库，在关系型数据库中数据主要以表的方式呈现的，所以存储引擎也被称作表类型（存储、操作表的类型）。</p><p>MySql中提供非常丰富的存储引擎适用于不同的业务场景，其中InnoDB和MyISAM为最常用的两种。MySql5.5.5之后版本默认为InnoDB类型，之前为MyISAM类型。</p><h3 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h3><p><strong>优点</strong></p><ul><li>查询速度快</li><li>支持全文索引（FULLTEXT）</li></ul><p><strong>缺点</strong></p><ul><li>不支持事务</li><li>不支持外键</li><li>不支持高并发（表级锁）</li></ul><p><strong>适用场景</strong></p><ul><li>查询和插入为主</li><li>并发要求低</li><li>安全性要求不高</li></ul><p><strong>存储形式</strong><br>每个表对应三个文件</p><ul><li><code>.frm</code>表定义文件</li><li><code>.MYD</code>数据文件</li><li><code>.MYI</code>索引文件</li></ul><h3 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h3><p><strong>优点</strong></p><ul><li>支持事务</li><li>支持外键</li><li>支持高并发（行级锁）</li><li>支持自增长列</li><li>支持崩溃数据自修复</li><li>支持全文索引（5.6版本以后）</li><li>支持地理坐标（5.7版本以后）</li></ul><p><strong>缺点</strong></p><ul><li>查询速度稍慢</li><li>占用更多磁盘空间存储索引和数据</li></ul><p><strong>适用场景</strong></p><ul><li>频繁更新修改</li><li>并发要求高</li><li>安全性要求高</li></ul><p><strong>存储形式</strong></p><ul><li>表空间数据文件</li><li>日志文件</li></ul><h3 id="Count示例"><a href="#Count示例" class="headerlink" title="Count示例"></a>Count示例</h3><p><code>select count(*) from table</code><br>MyISAM只要简单的读出保存好的行数，InnoDB中没有保存表的具体行数，所以会进行一次全表扫描。</p><p><code>select count(*) from table where ...</code><br>但是查询语句中含有条件语句，两种存储引擎都会进行全表扫描。</p><h3 id="行表锁示例"><a href="#行表锁示例" class="headerlink" title="行表锁示例"></a>行表锁示例</h3><p><code>update table set num=1 where name like &#39;%aaa%&#39;</code><br>虽然InnoDB中提供了行级锁,如上update语句当不能确定要扫描的范围时，还是会锁全表。</p><h3 id="ACID特性"><a href="#ACID特性" class="headerlink" title="ACID特性"></a>ACID特性</h3><ul><li><p><code>A(Atomicity)</code>原子性<br>原子性意思是事务执行是作为原子，即不可再分。相关概念：自动提交设置、<code>commit</code>语句、<code>rollback</code>语句。</p></li><li><p><code>C(Consistency)</code>一致性<br>一致性主要负责保护数据和从奔溃中恢复数据：双写缓存、奔溃恢复。</p></li><li><p><code>I(Isolation)</code>隔离性<br>表现多个事务之间的互不干扰。一个事务不可能看到其他事务运行时中间某一时刻的数据。</p></li><li><p><code>D(Durability)</code>持久性<br>持久性，意味着在事务完成以后，该事务所对数据库所作的更改便持久的保存在数据库之中，并不会被回滚。<br>即使出现了任何事故比如断电等，事务一旦提交，则持久化保存在数据库中。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;存储引擎&quot;&gt;&lt;a href=&quot;#存储引擎&quot; class=&quot;headerlink&quot; title=&quot;存储引擎&quot;&gt;&lt;/a&gt;存储引擎&lt;/h3&gt;&lt;p&gt;存储引擎就是针对如何存储数据、如何针对存储的数据进行增删改查而实现的一堆技术组合。目前主流的数据库还是关系型的数据库，在关系
      
    
    </summary>
    
      <category term="mark" scheme="http://yangdage.github.io/categories/mark/"/>
    
    
  </entry>
  
  <entry>
    <title>Redis缓存失效策略</title>
    <link href="http://yangdage.github.io/cache/cache/Redis%E7%BC%93%E5%AD%98%E5%A4%B1%E6%95%88%E6%9B%B4%E6%96%B0%E7%AD%96%E7%95%A5.html"/>
    <id>http://yangdage.github.io/cache/cache/Redis缓存失效更新策略.html</id>
    <published>2016-04-23T16:00:00.000Z</published>
    <updated>2016-07-19T06:43:42.363Z</updated>
    
    <content type="html"><![CDATA[<p>当缓存失效时，一般会去DB查询数据，再次加载到缓存，并设置好失效时间。但是在高并发的情况下，缓存失效会导致DB的压力陡增，也叫做缓存穿透。</p><p>最理想的状态是，我们缓存中一直有需要查询的数据，查询永远不会直接穿透到DB层。当然，这只是理想状态，一般情况下我们只要防止在缓存失效的时候不让高并发请求打到我们DB的查询上就行。解决方式是在DB查询时保证只有一个任务在执行就行。这里要区分单系统和分布式系统的情况。</p><p>这里有几种缓存更新的策略。</p><h3 id="定时器查询数据更新到缓存"><a href="#定时器查询数据更新到缓存" class="headerlink" title="定时器查询数据更新到缓存"></a>定时器查询数据更新到缓存</h3><p>系统启动指定的定时器去定时更新缓存中的数据。所有用户的请求都只查询缓存中的数据，缓存中没有也不会去查询DB。这种方式适合能够确定查询的数据一定是热数据、小数据的情况。如果是针对无法区分冷热的数据，也不知道到底要查哪些数据放到缓存中合适，这种情况就不适合用这种方式更新缓存。</p><h3 id="查询DB任务加锁"><a href="#查询DB任务加锁" class="headerlink" title="查询DB任务加锁"></a>查询DB任务加锁</h3><p>当缓存中取不到数据时，在查询DB的方法上加锁，保证只有一个线程查询DB。如果确定只有一个web服务的话，这种方式是最方便快速的解决方式，但是我们不能保证我们的系统以后不会部署分布式集群里。如果部署到集群里，我们在任务上加锁也没用，实际上还是有并发的DB查询。</p><h3 id="使用缓存锁查询DB任务"><a href="#使用缓存锁查询DB任务" class="headerlink" title="使用缓存锁查询DB任务"></a>使用缓存锁查询DB任务</h3><p>Redis提供了<code>SETNX</code>命令设置一个key，这个命令意思是，如果要设置的key不存在则返回1，如果已存在则返回0，memcached也提供了类似的<code>add</code>命令。无论是单点系统还是分布式系统都能保证同一时间只有一个查询DB的任务。缓存锁最好加上一个很短的失效时间，确保这个时间内任务能够执行完就好，一般定为3-5秒，设置缓存失效时间的另一个重要原因是考虑到任务可能执行失败的情况，后续请求能继续使用这个缓存锁。</p><h3 id="双key缓存，一个缓存数据，一个缓存失效时间"><a href="#双key缓存，一个缓存数据，一个缓存失效时间" class="headerlink" title="双key缓存，一个缓存数据，一个缓存失效时间"></a>双key缓存，一个缓存数据，一个缓存失效时间</h3><p>假设要缓存一个用户信息，并且缓存将在30分钟后失效。</p><p>设计一个key（userInfo_{userId}）缓存用户信息数据，并且设置失效时间为30分钟。<br>再设计一个key（expire<em>userInfo</em>{userId}）,值随便定，并且设置失效时间为25分钟，一定要在主要信息失效之前失效。<br>查询数据时先查key（expire<em>userInfo</em>{userId}）是否存在，如果不存在，则继续按上一个解决方式使用缓存锁启动一个任务查询用户信息数据追加到缓存里，并且设置失效时间为30分钟，另增对应缓存失效key，设置缓存失效时间为25分钟。如果存在则继续查询用户信息key（userInfo_{userId}）对应的数据返回。</p><h3 id="双key缓存，一个用作缓存锁，一个缓存数据，缓存数据最前面加上系统时间"><a href="#双key缓存，一个用作缓存锁，一个缓存数据，缓存数据最前面加上系统时间" class="headerlink" title="双key缓存，一个用作缓存锁，一个缓存数据，缓存数据最前面加上系统时间"></a>双key缓存，一个用作缓存锁，一个缓存数据，缓存数据最前面加上系统时间</h3><p>缓存锁功能还是跟上面的一样，缓存数据，设置失效时间为30分钟，数据最前面加上系统时间类似（time_value）,当读取缓存数据的时候，如果缓存中没有或者当前时间减time小于5分钟，使用缓存锁查询DB任务，并更新缓存。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;当缓存失效时，一般会去DB查询数据，再次加载到缓存，并设置好失效时间。但是在高并发的情况下，缓存失效会导致DB的压力陡增，也叫做缓存穿透。&lt;/p&gt;
&lt;p&gt;最理想的状态是，我们缓存中一直有需要查询的数据，查询永远不会直接穿透到DB层。当然，这只是理想状态，一般情况下我们只要防
      
    
    </summary>
    
      <category term="cache" scheme="http://yangdage.github.io/categories/cache/"/>
    
    
  </entry>
  
  <entry>
    <title>Docker常用命令</title>
    <link href="http://yangdage.github.io/mark/mark/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html"/>
    <id>http://yangdage.github.io/mark/mark/docker常用命令.html</id>
    <published>2016-04-19T16:00:00.000Z</published>
    <updated>2016-04-20T04:05:01.007Z</updated>
    
    <content type="html"><![CDATA[<h3 id="版本查看"><a href="#版本查看" class="headerlink" title="版本查看"></a>版本查看</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker version</div></pre></td></tr></table></figure><h3 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker search <span class="variable">$imageName</span>$</div></pre></td></tr></table></figure><h3 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker pull <span class="variable">$imageName</span>$</div></pre></td></tr></table></figure><h3 id="查看所有镜像"><a href="#查看所有镜像" class="headerlink" title="查看所有镜像"></a>查看所有镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker images</div></pre></td></tr></table></figure><h3 id="查看镜像历史"><a href="#查看镜像历史" class="headerlink" title="查看镜像历史"></a>查看镜像历史</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker <span class="built_in">history</span> <span class="variable">$imageName</span>$</div></pre></td></tr></table></figure><h3 id="删除所有镜像"><a href="#删除所有镜像" class="headerlink" title="删除所有镜像"></a>删除所有镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker rmi $(docker images -q)</div></pre></td></tr></table></figure><h3 id="删除所有未打标签的镜像"><a href="#删除所有未打标签的镜像" class="headerlink" title="删除所有未打标签的镜像"></a>删除所有未打标签的镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker rmi $(docker images -q -f dangling=<span class="literal">true</span>)</div></pre></td></tr></table></figure><h3 id="上传镜像"><a href="#上传镜像" class="headerlink" title="上传镜像"></a>上传镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker push <span class="variable">$imageName</span>$</div></pre></td></tr></table></figure><h3 id="查看所有容器"><a href="#查看所有容器" class="headerlink" title="查看所有容器"></a>查看所有容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker ps -a</div></pre></td></tr></table></figure><h3 id="查看最近启动的容器"><a href="#查看最近启动的容器" class="headerlink" title="查看最近启动的容器"></a>查看最近启动的容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker ps -l</div></pre></td></tr></table></figure><h3 id="查看所有容器ID"><a href="#查看所有容器ID" class="headerlink" title="查看所有容器ID"></a>查看所有容器ID</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker ps -a -q</div></pre></td></tr></table></figure><h3 id="杀死所有启动的容器"><a href="#杀死所有启动的容器" class="headerlink" title="杀死所有启动的容器"></a>杀死所有启动的容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker <span class="built_in">kill</span> $(docker ps -a -q)</div></pre></td></tr></table></figure><h3 id="删除所有容器"><a href="#删除所有容器" class="headerlink" title="删除所有容器"></a>删除所有容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker rm $(docker ps -a -q)</div></pre></td></tr></table></figure><h3 id="保存容器为镜像"><a href="#保存容器为镜像" class="headerlink" title="保存容器为镜像"></a>保存容器为镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker commit <span class="variable">$containerID</span>$ <span class="variable">$newImageName</span>$</div></pre></td></tr></table></figure><h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">docker run [OPTIONS] IMAGE[:TAG] [COMMAND] [ARG...]</div><div class="line"></div><div class="line">OPTIONS:</div><div class="line">-i:标准输入给容器</div><div class="line">-t:分配一个虚拟终端</div><div class="line">-d:以守护进程方式运行</div><div class="line">-P:默认匹配docker容器的5000端口号到宿主机的49153 to 65535端口</div><div class="line">-p HOT_PORT:CONTAINER_PORT:指定端口号</div><div class="line">--name:指定容器的名称</div><div class="line">--rm:退出时删除容器</div></pre></td></tr></table></figure><h3 id="进入容器终端"><a href="#进入容器终端" class="headerlink" title="进入容器终端"></a>进入容器终端</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -i -t <span class="variable">$imageName</span>$ /bin/bash</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;版本查看&quot;&gt;&lt;a href=&quot;#版本查看&quot; class=&quot;headerlink&quot; title=&quot;版本查看&quot;&gt;&lt;/a&gt;版本查看&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre
      
    
    </summary>
    
      <category term="mark" scheme="http://yangdage.github.io/categories/mark/"/>
    
    
  </entry>
  
  <entry>
    <title>Go中gob序列化反序列化</title>
    <link href="http://yangdage.github.io/go/go/go-gob.html"/>
    <id>http://yangdage.github.io/go/go/go-gob.html</id>
    <published>2016-04-18T16:00:00.000Z</published>
    <updated>2016-04-20T04:05:51.605Z</updated>
    
    <content type="html"><![CDATA[<h3 id="gob序列化反序列化"><a href="#gob序列化反序列化" class="headerlink" title="gob序列化反序列化"></a>gob序列化反序列化</h3><p>当使用了gob序列化一个对象，反序列化时一定要同样使用gob反序列化。因为使用gob序列化对象时会在字节数组最前面加上字节头数据。</p><h3 id="普通string与-byte转换"><a href="#普通string与-byte转换" class="headerlink" title="普通string与[]byte转换"></a>普通<strong>string</strong>与<strong>[]byte</strong>转换</h3><p>string转换为byte数组</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">var</span> s <span class="keyword">string</span> = <span class="string">"abcdefg"</span></div><div class="line">bs := []<span class="keyword">byte</span>(s)</div><div class="line"><span class="comment">//[97 98 99 100 101 102 103]</span></div><div class="line">fmt.Println(bs)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>byte数组转string</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">var</span> bs1 = []<span class="keyword">byte</span>&#123;<span class="number">97</span>, <span class="number">98</span>, <span class="number">99</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">102</span>, <span class="number">103</span>&#125;</div><div class="line"><span class="keyword">var</span> s <span class="keyword">string</span> = <span class="keyword">string</span>(bs1)</div><div class="line"><span class="comment">//abcdefg</span></div><div class="line">fmt.Println(s)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="使用gob转换string和-byte"><a href="#使用gob转换string和-byte" class="headerlink" title="使用gob转换string和[]byte"></a>使用gob转换<strong>string</strong>和<strong>[]byte</strong></h3><p>string转byte数组</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line"><span class="string">"bytes"</span></div><div class="line"><span class="string">"encoding/gob"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">var</span> s <span class="keyword">string</span> = <span class="string">"abcdefg"</span></div><div class="line">buf := &amp;bytes.Buffer&#123;&#125;</div><div class="line">gob.NewEncoder(buf).Encode(&amp;s)</div><div class="line">bs := buf.Bytes()</div><div class="line"><span class="comment">//[10 12 0 7 97 98 99 100 101 102 103]</span></div><div class="line">fmt.Println(bs)</div><div class="line"></div><div class="line"><span class="comment">//     abcdefg</span></div><div class="line">fmt.Println(s1)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>gob将string转byte数组时候会在最前面加上4个字节的头数据，这时如果使用普通方式将这个字节数组转string，前面会多出莫名奇妙的字符（显示为空格）。其中Encode()方法和Decode()方法都需传一个指针参数。Go会根据反射机制自动查找对应的数据结构类型。</p><p>byte数组转string</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line"><span class="string">"bytes"</span></div><div class="line"><span class="string">"encoding/gob"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">var</span> s <span class="keyword">string</span> = <span class="string">"abcdefg"</span></div><div class="line">buf := &amp;bytes.Buffer&#123;&#125;</div><div class="line">gob.NewEncoder(buf).Encode(&amp;s)</div><div class="line"><span class="keyword">var</span> s1 <span class="keyword">string</span></div><div class="line">gob.NewDecoder(buf).Decode(&amp;s1)</div><div class="line"><span class="comment">//abcdefg</span></div><div class="line">fmt.Println(s1)</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;gob序列化反序列化&quot;&gt;&lt;a href=&quot;#gob序列化反序列化&quot; class=&quot;headerlink&quot; title=&quot;gob序列化反序列化&quot;&gt;&lt;/a&gt;gob序列化反序列化&lt;/h3&gt;&lt;p&gt;当使用了gob序列化一个对象，反序列化时一定要同样使用gob反序列化。因为使
      
    
    </summary>
    
      <category term="go" scheme="http://yangdage.github.io/categories/go/"/>
    
    
  </entry>
  
  <entry>
    <title>Mathjax in Markdown</title>
    <link href="http://yangdage.github.io/mark/mark/markdown-mathjax.html"/>
    <id>http://yangdage.github.io/mark/mark/markdown-mathjax.html</id>
    <published>2016-04-11T16:00:00.000Z</published>
    <updated>2016-04-20T04:05:51.610Z</updated>
    
    <content type="html"><![CDATA[<h3 id="分数表示"><a href="#分数表示" class="headerlink" title="分数表示"></a>分数表示</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">\frac&#123;1&#125;&#123;3&#125; 或者 1 \over 3</div></pre></td></tr></table></figure><p>$\frac{1}{3}$</p><h3 id="上标下标"><a href="#上标下标" class="headerlink" title="上标下标"></a>上标下标</h3><p>^表示上标，_表示下标</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">x^2</div></pre></td></tr></table></figure><p>$x^2$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">x_2</div></pre></td></tr></table></figure><p>$x_2$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">x^&#123;y^2&#125;=(1+&#123;\rm e&#125;^2)^&#123;-2xy&#125;</div></pre></td></tr></table></figure><p>$x^{y^2}=(1+{\rm e}^2)^{-2xy}$</p><h3 id="矢量"><a href="#矢量" class="headerlink" title="矢量"></a>矢量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">\vec&#123;a&#125; \cdot \vec&#123;b&#125;=0</div></pre></td></tr></table></figure><p>$\vec{a} \cdot \vec{b}=0$</p><h3 id="微积分"><a href="#微积分" class="headerlink" title="微积分"></a>微积分</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">\int_0^1 x^2 &#123;\rm d&#125;x</div></pre></td></tr></table></figure><p>$\int_0^1 x^2 {\rm d}x$</p><h3 id="极限运算"><a href="#极限运算" class="headerlink" title="极限运算"></a>极限运算</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">\lim_&#123;n \rightarrow +\infty&#125; \frac&#123;1&#125;&#123;n(n+1)&#125;</div></pre></td></tr></table></figure><p>$\lim_{n \rightarrow +\infty} \frac{1}{n(n+1)}$</p><h3 id="累加、累乘"><a href="#累加、累乘" class="headerlink" title="累加、累乘"></a>累加、累乘</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">\sum_&#123;i=0&#125;^n \frac&#123;1&#125;&#123;i^2&#125; 和 \prod_&#123;i=0&#125;^n \frac&#123;1&#125;&#123;i^2&#125;</div></pre></td></tr></table></figure><p>$\sum_{i=0}^n \frac{1}{i^2}$</p><p>$\prod_{i=0}^n \frac{1}{i^2}$</p><h3 id="函数表示"><a href="#函数表示" class="headerlink" title="函数表示"></a>函数表示</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">\cos 2\theta = \cos^2 \theta - \sin^2 \theta =  2 \cos^2 \theta - 1</div></pre></td></tr></table></figure><p>$\cos 2\theta = \cos^2 \theta - \sin^2 \theta =  2 \cos^2 \theta - 1$</p><h3 id="标准正态分布"><a href="#标准正态分布" class="headerlink" title="标准正态分布"></a>标准正态分布</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">f(x) = &#123;1 \over \sigma\sqrt&#123;2\pi&#125; &#125;&#123;exp&#125;^\left(&#123;-&#123;x^2 \over 2&#125;&#125;\right)</div></pre></td></tr></table></figure><p>$f(x) = {1 \over \sigma\sqrt{2\pi} }{\rm exp}^\left({-{x^2 \over 2}}\right)$</p><h3 id="希腊字母"><a href="#希腊字母" class="headerlink" title="希腊字母"></a>希腊字母</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">\alpha　A　\beta　B　\gamma　\Gamma　\delta　\Delta　\epsilon　E</div><div class="line">\varepsilon　　\zeta　Z　\eta　H　\theta　\Theta　\vartheta \iota　I</div><div class="line">\kappa　K　\lambda　\Lambda　\mu　M　\nu　N \xi　\Xi　o　O　\pi　\Pi</div><div class="line">\varpi　　\rho　P \varrho　　\sigma　\Sigma　\varsigma　　\tau　T</div><div class="line">\upsilon　\Upsilon \phi　\Phi　\varphi　　\chi　X　\psi　\Psi</div><div class="line">\omega　\Omega</div></pre></td></tr></table></figure><p>$\alpha　A　\beta　B　\gamma　\Gamma　\delta　\Delta　\epsilon　E$<br>$\varepsilon　　\zeta　Z　\eta　H　\theta　\Theta　\vartheta \iota　I$<br>$\kappa　K　\lambda　\Lambda　\mu　M　\nu　N \xi　\Xi　o　O　\pi　\Pi$<br>$\varpi　　\rho　P \varrho　　\sigma　\Sigma　\varsigma　　\tau　T$<br>$\upsilon　\Upsilon \phi　\Phi　\varphi　　\chi　X　\psi　\Psi$<br>$\omega　\Omega$</p><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">\rm　　罗马体　　　　　　　\it　　意大利体</div><div class="line">\bf　　黑体　　　　　　　　\cal 　花体</div><div class="line">\sl　　倾斜体　　　　　　　\sf　　等线体</div><div class="line">\mit 　数学斜体　　　　　　\tt　　打字机字体</div><div class="line">\sc　　小体大写字母</div></pre></td></tr></table></figure><h3 id="其它特殊字符"><a href="#其它特殊字符" class="headerlink" title="其它特殊字符"></a>其它特殊字符</h3><h4 id="关系运算"><a href="#关系运算" class="headerlink" title="关系运算"></a>关系运算</h4><table><thead><tr><th>符号</th><th>表示</th></tr></thead><tbody><tr><td>$\pm$</td><td>\pm</td></tr><tr><td>$\times$</td><td>\times</td></tr><tr><td>$\div$</td><td>\div</td></tr><tr><td>$\mid$</td><td>\mid</td></tr><tr><td>$\nmid$</td><td>\nmid</td></tr><tr><td>$\cdot$</td><td>\cdot</td></tr><tr><td>$\circ$</td><td>\circ</td></tr><tr><td>$\ast$</td><td>\ast</td></tr><tr><td>$\bigodot$</td><td>\bigodot</td></tr><tr><td>$\bigotimes$</td><td>\bigotimes</td></tr><tr><td>$\bigoplus$</td><td>\bigoplus</td></tr><tr><td>$\leq$</td><td>\leq</td></tr><tr><td>$\geq$</td><td>\geq</td></tr><tr><td>$\neq$</td><td>\neq</td></tr><tr><td>$\approx$</td><td>\approx</td></tr><tr><td>$\equiv$</td><td>\equiv</td></tr><tr><td>$\sum$</td><td>\sum</td></tr><tr><td>$\prod$</td><td>\prod</td></tr><tr><td>$\coprod$</td><td>\coprod</td></tr></tbody></table><h4 id="集合运算"><a href="#集合运算" class="headerlink" title="集合运算"></a>集合运算</h4><table><thead><tr><th>符号</th><th>表示</th></tr></thead><tbody><tr><td>$\emptyset$</td><td>\emptyset</td></tr><tr><td>$\in$</td><td>\in</td></tr><tr><td>$\notin$</td><td>\notin</td></tr><tr><td>$\subset$</td><td>\subset</td></tr><tr><td>$\supset$</td><td>\supset</td></tr><tr><td>$\subseteq$</td><td>\subseteq</td></tr><tr><td>$\supseteq$</td><td>\supseteq</td></tr><tr><td>$\bigcap$</td><td>\bigcap</td></tr><tr><td>$\bigcup$</td><td>\bigcup</td></tr><tr><td>$\bigvee$</td><td>\bigvee</td></tr><tr><td>$\bigwedge$</td><td>\bigwedge</td></tr><tr><td>$\biguplus$</td><td>\biguplus</td></tr><tr><td>$\bigsqcup$</td><td>\bigsqcup</td></tr></tbody></table><h4 id="对数运算"><a href="#对数运算" class="headerlink" title="对数运算"></a>对数运算</h4><table><thead><tr><th>符号</th><th>表示</th></tr></thead><tbody><tr><td>$\log$</td><td>\log</td></tr><tr><td>$\lg$</td><td>\lg</td></tr><tr><td>$\ln$</td><td>\ln</td></tr></tbody></table><h4 id="三角运算"><a href="#三角运算" class="headerlink" title="三角运算"></a>三角运算</h4><table><thead><tr><th>符号</th><th>表示</th></tr></thead><tbody><tr><td>$\bot$</td><td>\bot</td></tr><tr><td>$\angle$</td><td>\angle</td></tr><tr><td>$30^\circ$</td><td>30^\circ</td></tr><tr><td>$\sin$</td><td>\sin</td></tr><tr><td>$\cos$</td><td>\cos</td></tr><tr><td>$\tan$</td><td>\tan</td></tr><tr><td>$\cot$</td><td>\cot</td></tr><tr><td>$\sec$</td><td>\sec</td></tr><tr><td>$\csc$</td><td>\csc</td></tr></tbody></table><h4 id="微积分运算"><a href="#微积分运算" class="headerlink" title="微积分运算"></a>微积分运算</h4><table><thead><tr><th>符号</th><th>表示</th></tr></thead><tbody><tr><td>$\prime$</td><td>\prime</td></tr><tr><td>$\int$</td><td>\int</td></tr><tr><td>$\iint$</td><td>\iint</td></tr><tr><td>$\iiint$</td><td>\iiint</td></tr><tr><td>$\iiiint$</td><td>\iiiint</td></tr><tr><td>$\oint$</td><td>\oint</td></tr><tr><td>$\lim$</td><td>\lim</td></tr><tr><td>$\infty$</td><td>\infty</td></tr><tr><td>$\nabla$</td><td>\nabla</td></tr></tbody></table><h4 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h4><table><thead><tr><th>符号</th><th>表示</th></tr></thead><tbody><tr><td>$\because$</td><td>\because</td></tr><tr><td>$\therefore$</td><td>\therefore</td></tr><tr><td>$\forall$</td><td>\forall</td></tr><tr><td>$\exists$</td><td>\exists</td></tr><tr><td>$\not=$</td><td>\not=</td></tr><tr><td>$\not&gt;$</td><td>\not&gt;</td></tr><tr><td>$\not\subset$</td><td>\not\subset</td></tr></tbody></table><h4 id="戴帽符号"><a href="#戴帽符号" class="headerlink" title="戴帽符号"></a>戴帽符号</h4><table><thead><tr><th>符号</th><th>表示</th></tr></thead><tbody><tr><td>$\hat{y}$</td><td>\hat{y}</td></tr><tr><td>$\check{y}$</td><td>\check{y}</td></tr><tr><td>$\breve{y}$</td><td>\breve{y}</td></tr></tbody></table><h4 id="连线符号"><a href="#连线符号" class="headerlink" title="连线符号"></a>连线符号</h4><table><thead><tr><th>符号</th><th>表示</th></tr></thead><tbody><tr><td>$\overline{a+b+c+d}$</td><td>\overline{a+b+c+d}</td></tr><tr><td>$\underline{a+b+c+d}$</td><td>\underline{a+b+c+d}</td></tr></tbody></table><h4 id="箭头符号"><a href="#箭头符号" class="headerlink" title="箭头符号"></a>箭头符号</h4><table><thead><tr><th>符号</th><th>表示</th></tr></thead><tbody><tr><td>$\uparrow$</td><td>\uparrow</td></tr><tr><td>$\downarrow$</td><td>\downarrow</td></tr><tr><td>$\Uparrow$</td><td>\Uparrow</td></tr><tr><td>$\Downarrow$</td><td>\Downarrow</td></tr><tr><td>$\rightarrow$</td><td>\rightarrow</td></tr><tr><td>$\leftarrow$</td><td>\leftarrow</td></tr><tr><td>$\Rightarrow$</td><td>\Rightarrow</td></tr><tr><td>$\Leftarrow$</td><td>\Leftarrow</td></tr><tr><td>$\longrightarrow$</td><td>\longrightarrow</td></tr><tr><td>$\longleftarrow$</td><td>\longleftarrow</td></tr><tr><td>$\Longrightarrow$</td><td>\Longrightarrow</td></tr><tr><td>$\Longleftarrow$</td><td>\Longleftarrow</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;分数表示&quot;&gt;&lt;a href=&quot;#分数表示&quot; class=&quot;headerlink&quot; title=&quot;分数表示&quot;&gt;&lt;/a&gt;分数表示&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
      <category term="mark" scheme="http://yangdage.github.io/categories/mark/"/>
    
    
  </entry>
  
  <entry>
    <title>Java中List列表排序</title>
    <link href="http://yangdage.github.io/java/java/Java%E5%88%97%E8%A1%A8%E7%BB%84%E5%90%88%E6%8E%92%E5%BA%8F.html"/>
    <id>http://yangdage.github.io/java/java/Java列表组合排序.html</id>
    <published>2016-04-09T16:00:00.000Z</published>
    <updated>2016-04-20T04:05:51.606Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简单类型元素排序"><a href="#简单类型元素排序" class="headerlink" title="简单类型元素排序"></a>简单类型元素排序</h3><p>Java中定义的List实现类有：Vector，ArrayList，LinkedList。这些集合类提供了对列表中元素的索引访问和对元素的添加与删除支持，然而并没有提供排序支持。但是java.util.Collections类提供了两种支持，如下：</p><ul><li>java.util.Collections.sort(java.util.List)</li><li>java.util.Collections.sort(java.util.List, java.util.Comparator)</li></ul><p>第一个方法要求List中元素类实现java.lang.Comparable接口。<br>第二个方法需要在元素类外部使用java.util.Comparator接口。<br>Comparable需要在类内部实现排序方法，Comparator是在类外部实现的排序。<br>Comparator是一个专用的比较器，当这个对象不支持自比较时，就可以写一个比较器来比较两个对象之间大小。<br>我们常用的String和Integer内部就已经实现了Comparable接口。</p><p>sort()方法可以支持对List元素的排序。我们可以简单的传一个List对象，也可以传一个List对象和一个Comparator。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">list.add(<span class="string">"aaaa"</span>);</div><div class="line">list.add(<span class="string">"BBBB"</span>);</div><div class="line">list.add(<span class="string">"AAAA"</span>);</div><div class="line">list.add(<span class="string">"bbbb"</span>);</div><div class="line">Collections.sort(list);</div><div class="line">System.out.println(list.toString());<span class="comment">//[AAAA, BBBB, aaaa, bbbb]</span></div></pre></td></tr></table></figure><p>以上List中元素的类型都是String类型的，排序的顺序是根据每个字符的ASCII/Unicode值顺序排序的。Unicode编码中，英文大写字母A-Z是排在小写字母a-z前面的。如果我们想让元素逆序排序，只需要传给sort()方法一个反序Comparator即可，反序Comparator对象可以直接由Connections.reverseOrder()方法获取。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">list.add(<span class="string">"aaaa"</span>);</div><div class="line">list.add(<span class="string">"BBBB"</span>);</div><div class="line">list.add(<span class="string">"AAAA"</span>);</div><div class="line">list.add(<span class="string">"bbbb"</span>);</div><div class="line">Comparator comp = Collections.reverseOrder();</div><div class="line">Collections.sort(list, comp);</div><div class="line">System.out.println(list.toString());<span class="comment">//[bbbb, aaaa, BBBB, AAAA]</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="自定义类集合排序"><a href="#自定义类集合排序" class="headerlink" title="自定义类集合排序"></a>自定义类集合排序</h3><p>我们要对一个自定义的类进行排序，有两种方式，一种是让该类实现Comparable接口，并实现compareTo()方法。另一种是在类外部单独定义一个比较器，比较器实现Comparator接口。<br>现在我们定义一个Person类，有三个属性：name，birth，score，分别对应姓名，生日，和分数。我们实现一个按分数的排序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Person</span>&gt; </span>&#123;</div><div class="line"><span class="keyword">private</span> String name;</div><div class="line"><span class="keyword">private</span> String birth;</div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> score;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, String birth, <span class="keyword">int</span> score)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.birth = birth;</div><div class="line">        <span class="keyword">this</span>.score = score;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getBirth</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> birth;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirth</span><span class="params">(String birth)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.birth = birth;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getScore</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> score;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setScore</span><span class="params">(<span class="keyword">int</span> score)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.score = score;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Person other)</span> </span>&#123;</div><div class="line"><span class="keyword">int</span> diff = <span class="keyword">this</span>.getScore() - other.getScore();</div><div class="line"><span class="keyword">if</span> (diff &gt; <span class="number">0</span>) &#123;</div><div class="line"><span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (diff &lt; <span class="number">0</span>) &#123;</div><div class="line"><span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</div><div class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</div><div class="line">                <span class="string">", birth='"</span> + birth + <span class="string">'\''</span> +</div><div class="line">                <span class="string">", score="</span> + score +</div><div class="line">                <span class="string">'&#125;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SortTest</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">List&lt;Person&gt; list = <span class="keyword">new</span> ArrayList&lt;Person&gt;();</div><div class="line">list.add(<span class="keyword">new</span> Person(<span class="string">"aaaa"</span>, <span class="string">"1990-01-01"</span>, <span class="number">90</span>));</div><div class="line">list.add(<span class="keyword">new</span> Person(<span class="string">"BBBB"</span>, <span class="string">"1991-03-14"</span>, <span class="number">85</span>));</div><div class="line">list.add(<span class="keyword">new</span> Person(<span class="string">"AAAA"</span>, <span class="string">"1992-10-21"</span>, <span class="number">98</span>));</div><div class="line">list.add(<span class="keyword">new</span> Person(<span class="string">"bbbb"</span>, <span class="string">"1990-08-09"</span>, <span class="number">80</span>));</div><div class="line">Collections.sort(list);</div><div class="line"></div><div class="line"><span class="comment">//[Person&#123;name='bbbb', birth='1990-08-09', score=80&#125;, Person&#123;name='BBBB', birth='1991-03-14', score=85&#125;, Person&#123;name='aaaa', birth='1990-01-01', score=90&#125;, Person&#123;name='AAAA', birth='1992-10-21', score=98&#125;]</span></div><div class="line"></div><div class="line">System.out.println(list.toString());</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如果我们不想使用Person内部定义的排序，我们可以在外部使用Comparator类来实现。下面使用Comparator类实现一个要按出生日期排序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">List&lt;Person&gt; list = <span class="keyword">new</span> ArrayList&lt;Person&gt;();</div><div class="line">list.add(<span class="keyword">new</span> Person(<span class="string">"aaaa"</span>, <span class="string">"1990-01-01"</span>, <span class="number">90</span>));</div><div class="line">list.add(<span class="keyword">new</span> Person(<span class="string">"BBBB"</span>, <span class="string">"1991-03-14"</span>, <span class="number">85</span>));</div><div class="line">list.add(<span class="keyword">new</span> Person(<span class="string">"AAAA"</span>, <span class="string">"1992-10-21"</span>, <span class="number">98</span>));</div><div class="line">list.add(<span class="keyword">new</span> Person(<span class="string">"bbbb"</span>, <span class="string">"1990-08-09"</span>, <span class="number">80</span>));</div><div class="line">Collections.sort(list, <span class="keyword">new</span> Comparator&lt;Person&gt;() &#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Person o1, Person o2)</span> </span>&#123;</div><div class="line"><span class="keyword">int</span> diff = o1.getBirth().compareTo(o2.getBirth());</div><div class="line"><span class="keyword">if</span> (diff &gt; <span class="number">0</span>) &#123;</div><div class="line"><span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (diff &lt; <span class="number">0</span>) &#123;</div><div class="line"><span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//[Person&#123;name='aaaa', birth='1990-01-01', score=90&#125;, Person&#123;name='bbbb', birth='1990-08-09', score=80&#125;, Person&#123;name='BBBB', birth='1991-03-14', score=85&#125;, Person&#123;name='AAAA', birth='1992-10-21', score=98&#125;]</span></div><div class="line"></div><div class="line">System.out.println(list.toString());</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="多条件排序"><a href="#多条件排序" class="headerlink" title="多条件排序"></a>多条件排序</h3><p>再来实现先按分数高到低，再按出生早晚两个条件来排序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SortTest</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">List&lt;Person&gt; list = <span class="keyword">new</span> ArrayList&lt;Person&gt;();</div><div class="line">list.add(<span class="keyword">new</span> Person(<span class="string">"aaaa"</span>, <span class="string">"1990-01-01"</span>, <span class="number">90</span>));</div><div class="line">list.add(<span class="keyword">new</span> Person(<span class="string">"BBBB"</span>, <span class="string">"1991-03-14"</span>, <span class="number">85</span>));</div><div class="line">list.add(<span class="keyword">new</span> Person(<span class="string">"AAAA"</span>, <span class="string">"1992-01-21"</span>, <span class="number">98</span>));</div><div class="line">list.add(<span class="keyword">new</span> Person(<span class="string">"AAAA"</span>, <span class="string">"1991-10-21"</span>, <span class="number">98</span>));</div><div class="line">list.add(<span class="keyword">new</span> Person(<span class="string">"AAAA"</span>, <span class="string">"1992-10-23"</span>, <span class="number">98</span>));</div><div class="line">list.add(<span class="keyword">new</span> Person(<span class="string">"bbbb"</span>, <span class="string">"1990-08-09"</span>, <span class="number">80</span>));</div><div class="line"></div><div class="line">List&lt;Comparator&lt;Person&gt;&gt; comparatorList = <span class="keyword">new</span> ArrayList&lt;Comparator&lt;Person&gt;&gt;();</div><div class="line">comparatorList.add(compareScore);</div><div class="line">comparatorList.add(compareBirth);</div><div class="line"></div><div class="line">sort(list, comparatorList);</div><div class="line"></div><div class="line"><span class="comment">//[Person&#123;name='AAAA', birth='1991-10-21', score=98&#125;, Person&#123;name='AAAA', birth='1992-01-21', score=98&#125;, Person&#123;name='AAAA', birth='1992-10-23', score=98&#125;, Person&#123;name='aaaa', birth='1990-01-01', score=90&#125;, Person&#123;name='BBBB', birth='1991-03-14', score=85&#125;, Person&#123;name='bbbb', birth='1990-08-09', score=80&#125;]</span></div><div class="line"></div><div class="line">System.out.println(list.toString());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(List&lt;Person&gt; list, <span class="keyword">final</span> List&lt;Comparator&lt;Person&gt;&gt; compareList)</span> </span>&#123;</div><div class="line"><span class="keyword">if</span> (list == <span class="keyword">null</span> || compareList == <span class="keyword">null</span>) &#123;</div><div class="line"><span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line">Comparator&lt;Person&gt; comparator = <span class="keyword">new</span> Comparator&lt;Person&gt;() &#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Person o1, Person o2)</span> </span>&#123;</div><div class="line"><span class="keyword">for</span> (Comparator&lt;Person&gt; tmpComparatoe : compareList) &#123;</div><div class="line"><span class="keyword">if</span> (tmpComparatoe.compare(o1, o2) &gt; <span class="number">0</span>) &#123;</div><div class="line"><span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (tmpComparatoe.compare(o1, o2) &lt; <span class="number">0</span>) &#123;</div><div class="line"><span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line">&#125;;</div><div class="line">Collections.sort(list, comparator);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> Comparator&lt;Person&gt; compareScore = <span class="keyword">new</span> Comparator&lt;Person&gt;() &#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Person o1, Person o2)</span> </span>&#123;</div><div class="line"><span class="keyword">int</span> diff = o1.getScore() - o2.getScore();</div><div class="line"><span class="keyword">if</span> (diff &gt; <span class="number">0</span>) &#123;</div><div class="line"><span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (diff &lt; <span class="number">0</span>) &#123;</div><div class="line"><span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> Comparator&lt;Person&gt; compareBirth = <span class="keyword">new</span> Comparator&lt;Person&gt;() &#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Person o1, Person o2)</span> </span>&#123;</div><div class="line"><span class="keyword">int</span> diff = o1.getBirth().compareTo(o2.getBirth());</div><div class="line"><span class="keyword">if</span> (diff &gt; <span class="number">0</span>) &#123;</div><div class="line"><span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (diff &lt; <span class="number">0</span>) &#123;</div><div class="line"><span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line">&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="使用apache集合操作类ComparatorUtils实现多条件排序"><a href="#使用apache集合操作类ComparatorUtils实现多条件排序" class="headerlink" title="使用apache集合操作类ComparatorUtils实现多条件排序"></a>使用apache集合操作类ComparatorUtils实现多条件排序</h3><p>上述Java原生类实现的多条件排序可读性可维护性都比较差，特别是排序条件多了以后，我们要写更多的if判断和比较器。<br>这里使用apache提供的集合操作类ComparatorUtils可以很快实现上面的排序功能。ComparatorChain排序链类使我们更方便的定义第一排序、第二排序，第三排序等等。<br>首先需要引入Apache-common的beanutils、collections、logging三个包。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> sort;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.Collections;</div><div class="line"><span class="keyword">import</span> java.util.Comparator;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanComparator;</div><div class="line"><span class="keyword">import</span> org.apache.commons.collections.ComparatorUtils;</div><div class="line"><span class="keyword">import</span> org.apache.commons.collections.comparators.ComparableComparator;</div><div class="line"><span class="keyword">import</span> org.apache.commons.collections.comparators.ComparatorChain;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SortTest</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">List&lt;Person&gt; list = <span class="keyword">new</span> ArrayList&lt;Person&gt;();</div><div class="line">list.add(<span class="keyword">new</span> Person(<span class="string">"aaaa"</span>, <span class="string">"1990-01-01"</span>, <span class="number">90</span>));</div><div class="line">list.add(<span class="keyword">new</span> Person(<span class="string">"BBBB"</span>, <span class="string">"1991-03-14"</span>, <span class="number">85</span>));</div><div class="line">list.add(<span class="keyword">new</span> Person(<span class="string">"AAAA"</span>, <span class="string">"1992-01-21"</span>, <span class="number">98</span>));</div><div class="line">list.add(<span class="keyword">new</span> Person(<span class="string">"AAAA"</span>, <span class="string">"1991-10-21"</span>, <span class="number">98</span>));</div><div class="line">list.add(<span class="keyword">new</span> Person(<span class="string">"AAAA"</span>, <span class="string">"1992-10-23"</span>, <span class="number">98</span>));</div><div class="line">list.add(<span class="keyword">new</span> Person(<span class="string">"bbbb"</span>, <span class="string">"1990-08-09"</span>, <span class="number">80</span>));</div><div class="line"></div><div class="line">Comparator mycmp = ComparableComparator.getInstance();</div><div class="line">mycmp = ComparatorUtils.nullLowComparator(mycmp);<span class="comment">// 允许null</span></div><div class="line">mycmp = ComparatorUtils.reversedComparator(mycmp);<span class="comment">// 逆序</span></div><div class="line"></div><div class="line">ArrayList&lt;Object&gt; sortFields = <span class="keyword">new</span> ArrayList&lt;Object&gt;();</div><div class="line">sortFields.add(<span class="keyword">new</span> BeanComparator(<span class="string">"score"</span>, mycmp));<span class="comment">// 第一排序，分数逆序</span></div><div class="line">sortFields.add(<span class="keyword">new</span> BeanComparator(<span class="string">"birth"</span>));<span class="comment">// 第二排序，出生时间顺序</span></div><div class="line"></div><div class="line">ComparatorChain multiSort = <span class="keyword">new</span> ComparatorChain(sortFields);</div><div class="line">Collections.sort(list, multiSort);</div><div class="line"></div><div class="line"><span class="comment">//[Person&#123;name='AAAA', birth='1991-10-21', score=98&#125;, Person&#123;name='AAAA', birth='1992-01-21', score=98&#125;, Person&#123;name='AAAA', birth='1992-10-23', score=98&#125;, Person&#123;name='aaaa', birth='1990-01-01', score=90&#125;, Person&#123;name='BBBB', birth='1991-03-14', score=85&#125;, Person&#123;name='bbbb', birth='1990-08-09', score=80&#125;]</span></div><div class="line"></div><div class="line">System.out.println(list.toString());</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;简单类型元素排序&quot;&gt;&lt;a href=&quot;#简单类型元素排序&quot; class=&quot;headerlink&quot; title=&quot;简单类型元素排序&quot;&gt;&lt;/a&gt;简单类型元素排序&lt;/h3&gt;&lt;p&gt;Java中定义的List实现类有：Vector，ArrayList，LinkedList。这
      
    
    </summary>
    
      <category term="java" scheme="http://yangdage.github.io/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>JS里的函数声明/匿名函数/函数表达式/立即执行函数/立即调用表达式</title>
    <link href="http://yangdage.github.io/javascript/javascript/%E5%87%BD%E6%95%B0%E5%A3%B0%E6%98%8E-%E8%A1%A8%E8%BE%BE%E5%BC%8F-%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0.html"/>
    <id>http://yangdage.github.io/javascript/javascript/函数声明-表达式-匿名函数.html</id>
    <published>2016-04-01T16:00:00.000Z</published>
    <updated>2016-04-20T04:05:51.607Z</updated>
    
    <content type="html"><![CDATA[<h3 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h3><p>函数声明必须首先有个<strong>function</strong>关键字，再指定一个函数名称，自己随便定义，不违反函数名称的定义规则就行，如下格式：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">funName</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="comment">//do something</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>匿名函数不需要定义函数名字，只有一个<strong>function</strong>关键字，其他跟函数声明一样。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="comment">//do something</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h3><p>将一个匿名函数赋值给一个变量来创建一个函数，就形成了函数表达式。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> funName=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="comment">//do something</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>注意：JS解析引擎在解析js代码时，会提升函数声明。</strong></p><h3 id="立即执行函数-立即调用表达式"><a href="#立即执行函数-立即调用表达式" class="headerlink" title="立即执行函数/立即调用表达式"></a>立即执行函数/立即调用表达式</h3><p>立即执行函数也叫立即调用表达式。<br>在函数表达式后面直接加一对小括号<strong>()</strong>就构成了立即执行函数。立即执行函数不需要显示调用，在函数定义的时候就直接执行。</p><p><strong>强调一点，括号前面必须是函数表达式</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> funName=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">alert(<span class="number">111</span>);</div><div class="line">&#125;();</div></pre></td></tr></table></figure><p>上面代码等价于下面这段：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> funName=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">alert(<span class="number">111</span>);</div><div class="line">&#125;;</div><div class="line">funName();<span class="comment">//定义完,立即执行</span></div></pre></td></tr></table></figure><p>既然前面提到了立即执行函数的括号前面必须是函数表达式，好奇心的驱使，我们可以试试函数声明是不是真的不行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">funName</span>(<span class="params"></span>)</span>&#123;</div><div class="line">alert(<span class="number">111</span>);</div><div class="line">&#125;();</div></pre></td></tr></table></figure><p>打开浏览器，我们可以看到，确实没有弹出alert提示框。</p><p>虽然函数声明不能立即执行，但是JS里提供了很多方式允许我们将函数声明转换为函数表达式。</p><ul><li>1.改成var funName=function(){//do something};</li><li>2.把函数声明用一对括号<strong>()</strong>包裹起来</li><li>3.消除函数声明和函数表达式间歧义，例如在函数声明<strong>function</strong>关键字前面加!、+、-</li></ul><p>第一个就不用解释了，这种定义就是一个最普通的函数表达式。</p><p>第二个，把函数声明用一对括号<strong>()</strong>包裹起来<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> <span class="title">funName</span>(<span class="params"></span>)</span>&#123;</div><div class="line">alert(<span class="number">111</span>);</div><div class="line">&#125;)();</div></pre></td></tr></table></figure></p><p>这种写法还有个变体：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> <span class="title">funName</span>(<span class="params"></span>)</span>&#123;</div><div class="line">alert(<span class="number">111</span>);</div><div class="line">&#125;());</div></pre></td></tr></table></figure><p>第三个，在函数声明<strong>function</strong>关键字前面加!、~、+、-</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">!<span class="function"><span class="keyword">function</span> <span class="title">funName</span>(<span class="params"></span>)</span>&#123;</div><div class="line">alert(<span class="number">111</span>);</div><div class="line">&#125;();</div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">~<span class="function"><span class="keyword">function</span> <span class="title">funName</span>(<span class="params"></span>)</span>&#123;</div><div class="line">alert(<span class="number">111</span>);</div><div class="line">&#125;();</div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">+<span class="function"><span class="keyword">function</span> <span class="title">funName</span>(<span class="params"></span>)</span>&#123;</div><div class="line">alert(<span class="number">111</span>);</div><div class="line">&#125;();</div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">-<span class="function"><span class="keyword">function</span> <span class="title">funName</span>(<span class="params"></span>)</span>&#123;</div><div class="line">alert(<span class="number">111</span>);</div><div class="line">&#125;();</div></pre></td></tr></table></figure><p>立即执行函数最推荐的写法是<strong>(function(){…})()</strong>，有测试发现这种写法的性能是最优的。我们看过JQuery源码的都知道，JQuery中代码就是包裹在<strong>(function(window,undefined){…})(window)</strong>块里面。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;函数声明&quot;&gt;&lt;a href=&quot;#函数声明&quot; class=&quot;headerlink&quot; title=&quot;函数声明&quot;&gt;&lt;/a&gt;函数声明&lt;/h3&gt;&lt;p&gt;函数声明必须首先有个&lt;strong&gt;function&lt;/strong&gt;关键字，再指定一个函数名称，自己随便定义，不违反函数名
      
    
    </summary>
    
      <category term="javascript" scheme="http://yangdage.github.io/categories/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>Vim下XML文件格式化</title>
    <link href="http://yangdage.github.io/mark/mark/vim-xml-format.html"/>
    <id>http://yangdage.github.io/mark/mark/vim-xml-format.html</id>
    <published>2016-03-28T16:00:00.000Z</published>
    <updated>2016-04-20T04:05:51.611Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-打开需要格式化的文件"><a href="#1-打开需要格式化的文件" class="headerlink" title="1.打开需要格式化的文件"></a>1.打开需要格式化的文件</h3><p>使用vim命令打开需要格式化的xml文件，html也属于xml的一种，因此也可使用该方法格式化html文件。<br>现有一个如下的未格式化的文件：<br><img src="https://raw.githubusercontent.com/yangdage/images/master/20160330/20160328154539.png" alt="origin image"></p><h3 id="2-保存临时修改"><a href="#2-保存临时修改" class="headerlink" title="2.保存临时修改"></a>2.保存临时修改</h3><p>如果我们打开后有对文件进行编辑操作，需要保存所做的修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">:w</div></pre></td></tr></table></figure><p>在命令模式下输入上面的命令，保存改动，不退出文件</p><h3 id="3-启用自动缩进选项"><a href="#3-启用自动缩进选项" class="headerlink" title="3.启用自动缩进选项"></a>3.启用自动缩进选项</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">:filetype indent on</div></pre></td></tr></table></figure><h3 id="4-设置文件类型"><a href="#4-设置文件类型" class="headerlink" title="4.设置文件类型"></a>4.设置文件类型</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">:<span class="built_in">set</span> filetype=xml</div></pre></td></tr></table></figure><h3 id="5-全局格式化"><a href="#5-全局格式化" class="headerlink" title="5.全局格式化"></a>5.全局格式化</h3><p>回到文件头：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gg</div></pre></td></tr></table></figure><p>使用缩进（格式化）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">=</div></pre></td></tr></table></figure></p><p>格式化到文件尾:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">G</div></pre></td></tr></table></figure><h3 id="6-格式化结果"><a href="#6-格式化结果" class="headerlink" title="6.格式化结果"></a>6.格式化结果</h3><p><img src="https://raw.githubusercontent.com/yangdage/images/master/20160330/20160330115035.png" alt="origin image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-打开需要格式化的文件&quot;&gt;&lt;a href=&quot;#1-打开需要格式化的文件&quot; class=&quot;headerlink&quot; title=&quot;1.打开需要格式化的文件&quot;&gt;&lt;/a&gt;1.打开需要格式化的文件&lt;/h3&gt;&lt;p&gt;使用vim命令打开需要格式化的xml文件，html也属于xm
      
    
    </summary>
    
      <category term="mark" scheme="http://yangdage.github.io/categories/mark/"/>
    
    
  </entry>
  
  <entry>
    <title>Sublime下的Package Control</title>
    <link href="http://yangdage.github.io/mark/mark/sublime-package-control.html"/>
    <id>http://yangdage.github.io/mark/mark/sublime-package-control.html</id>
    <published>2016-03-22T16:00:00.000Z</published>
    <updated>2016-04-20T04:05:51.611Z</updated>
    
    <content type="html"><![CDATA[<p>有时候我们安装的Sublime默认情况下没有安装Package Control(暂且叫它插件管理器)，没有安装它的情况下就不能很方便的安装官方的插件。</p><p>打开sublime，查看是否存在以下目录</p><p><img src="https://raw.githubusercontent.com/yangdage/images/master/20160330/20160330174915.png" alt="package control"></p><p>如果没有，我们需要安装Package Control</p><p>通过快捷键 <strong>ctrl+`</strong> 或者 <strong>View &gt; Show Console</strong> 菜单打开控制台，复制粘贴以下脚本，确保中间无换行。</p><p>Sublime3:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import  urllib.request,os;pf=<span class="string">'Package Control.sublime-package'</span>;ipp=sublime.installed_packages_path();urllib.request.install_opener(urllib.request.build_opener(urllib.request.ProxyHandler()));open(os.path.join(ipp,pf),<span class="string">'wb'</span>).write(urllib.request.urlopen(<span class="string">'http://sublime.wbond.net/'</span>+pf.replace(<span class="string">' '</span>,<span class="string">'%20'</span>)).<span class="built_in">read</span>())</div></pre></td></tr></table></figure><p>Sublime2:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import  urllib2,os;pf=<span class="string">'Package Control.sublime-package'</span>;ipp=sublime.installed_packages_path();os.makedirs(ipp)ifnotos.path.exists(ipp)elseNone;urllib2.install_opener(urllib2.build_opener(urllib2.ProxyHandler()));open(os.path.join(ipp,pf),<span class="string">'wb'</span>).write(urllib2.urlopen(<span class="string">'http://sublime.wbond.net/'</span>+pf.replace(<span class="string">' '</span>,<span class="string">'%20'</span>)).<span class="built_in">read</span>());<span class="built_in">print</span>(<span class="string">'Please restart Sublime Text to finish installation'</span>)</div></pre></td></tr></table></figure><p>重启sublime，通过快捷键<strong>ctrl+shift+p</strong>打开命令面板，输入package，查看Package Control是否安装正常</p><p><img src="https://raw.githubusercontent.com/yangdage/images/master/20160330/20160330175617.png" alt="package control"></p><p>出现如上命令选项证明安装已正常，可以愉快的安装乱七八糟的插件了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;有时候我们安装的Sublime默认情况下没有安装Package Control(暂且叫它插件管理器)，没有安装它的情况下就不能很方便的安装官方的插件。&lt;/p&gt;
&lt;p&gt;打开sublime，查看是否存在以下目录&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.gith
      
    
    </summary>
    
      <category term="mark" scheme="http://yangdage.github.io/categories/mark/"/>
    
    
  </entry>
  
  <entry>
    <title>Javascript闭包(Closure)</title>
    <link href="http://yangdage.github.io/javascript/javascript/javascript-closure.html"/>
    <id>http://yangdage.github.io/javascript/javascript/javascript-closure.html</id>
    <published>2016-03-21T16:00:00.000Z</published>
    <updated>2016-04-20T04:05:51.607Z</updated>
    
    <content type="html"><![CDATA[<h3 id="敌在暗，我在明"><a href="#敌在暗，我在明" class="headerlink" title="敌在暗，我在明"></a>敌在暗，我在明</h3><p>看电影的时候我们经常会看到这样的剧情，当敌暗，我在明时，我们的一举一动他们都了如指掌，我们对他们的情况却一无所知。但是我们需要知道对方的真实情况才能从容的应对，这时候最常见的剧情就是在敌方安插我方的眼线，给我们提供情报支持。</p><h3 id="初识Javascript闭包"><a href="#初识Javascript闭包" class="headerlink" title="初识Javascript闭包"></a>初识Javascript闭包</h3><p>我们先来看一段简短的js代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">fun1</span></span>()&#123;</div><div class="line">var i=0;</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">fun2</span></span>()&#123;</div><div class="line"><span class="built_in">return</span> i;</div><div class="line">&#125;</div><div class="line"><span class="built_in">return</span> fun2;</div><div class="line">&#125;</div><div class="line">var result=fun1();</div><div class="line">console.log(result());</div></pre></td></tr></table></figure><p>这里我们做个映射关系：<strong>result</strong>变量相当于我方成员，<strong>i</strong>相当于敌方的一份情报数据，<strong>fun2</strong>就是我方安插在地方的眼线，专门为我们提供情报数据。</p><p>注意一下<strong>result=fun1();</strong>这句，这里<strong>fun1()</strong>函数返回的是一个函数<strong>fun2()</strong>，这样<strong>result</strong>实际上就是一个直接指向<strong>fun2()</strong>的函数引用。由于<strong>fun2()</strong>可以直接读取<strong>fun1()</strong>内部的变量<strong>i</strong>，因此我们可以实现在函数<strong>fun1()</strong>的外部获取其内部的成员变量。</p><p><strong>fun2()函数就是一个闭包</strong>，引用开始的形容来说，其实js里的闭包就如同一个外部对象安插在一个函数内部的专门对外提供情报的眼线，现在我们来看下<strong>fun2()</strong>函数的特点：</p><ul><li><strong>fun2()</strong>在<strong>fun1()</strong>函数内部</li><li><strong>fun2()</strong>函数里引用了<strong>fun1()</strong>函数里的变量<strong>i</strong></li></ul><p>其实以上的理解还不是很完善，<strong>真正意义上的闭包不仅仅是指定的某个满足条件的函数，而是这个满足条件的函数和其引用环境（父级往上一直到window对象级的作用域环境）组成的一个整体</strong>。</p><h3 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h3><p>闭包是js里一个不可避开的概念，也是一个理解难点，主要原因可能是其正式的书面定义太过于晦涩难懂。在理解闭包之前，我们需要来来梳理一下js里的变量作用域。<br>变量作用域分为以下两种：</p><ul><li>局部变量</li><li>全局变量</li></ul><p>在js里无论在什么地方定义变量，只要是没有在前面加var声明的，都会被提升为全局变量。即使在函数里面也是一样。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">i=<span class="number">100</span>;</div><div class="line"><span class="built_in">console</span>.log(i);<span class="comment">//i=100</span></div></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</div><div class="line">i=<span class="number">100</span>;</div><div class="line">&#125;</div><div class="line">fun();</div><div class="line"><span class="built_in">console</span>.log(i);<span class="comment">//i=100</span></div></pre></td></tr></table></figure><p>以上两段js代码中最后i都会输出100，即使第二段中i定义在函数fun()里面，由于没有加var声明，就相当于声明了一个全局变量，直属于window对象。</p><p>如果函数里面的变量加了var声明，那么函数外部一般情况就取不到这个变量的值，Firefox浏览器控制台会输出以下错误信息。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="keyword">var</span> i=<span class="number">100</span>;</div><div class="line">&#125;</div><div class="line">fun();</div><div class="line"><span class="built_in">console</span>.log(i);<span class="comment">//ReferenceError: i is not defined</span></div></pre></td></tr></table></figure></p><p>作用域总结：</p><ul><li>1.作用域分两种：局部和全局</li><li>2.函数内部可以读取全局变量</li><li>3.一般情况函数外部无法读取局部变量</li><li>4.函数内部变量定义不加var声明，实际相当于定义了一个全局变量</li></ul><h3 id="函数外部获取局部变量"><a href="#函数外部获取局部变量" class="headerlink" title="函数外部获取局部变量"></a>函数外部获取局部变量</h3><p>上节已经说过，一般情况下，我们是无法在函数外部读取函数内部声明的局部变量的，那怎样才能实现在函数外部获取局部变量了。来，直接上代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="keyword">var</span> a=<span class="number">100</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun2</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="keyword">var</span> b=<span class="number">200</span>;</div><div class="line"><span class="built_in">console</span>.log(a);<span class="comment">//a=100</span></div><div class="line">&#125;</div><div class="line">fun2();</div><div class="line"><span class="built_in">console</span>.log(b);<span class="comment">//ReferenceError: b is not defined</span></div><div class="line">&#125;</div><div class="line">fun1();</div></pre></td></tr></table></figure><p>从上面代码的输出可以看出来，fun2()函数可以读取fun1()里声明的变量，而fun1()函数里不能获取fun2()里声明的变量。这就是Javascript里的<strong>链式作用域</strong>，子对象可以访问所有上级父对象的所有变量。上面代码里fun2()既然能读到fun1()里的变量，那么如果我们在fun1()最后直接返回fun2()函数，fun1()外部不就可以读取其内部变量了么。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="keyword">var</span> a=<span class="number">100</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun2</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="keyword">return</span> a;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> fun2();</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> result=fun1();</div><div class="line"><span class="built_in">console</span>.log(result());</div></pre></td></tr></table></figure><p>到这里，我们肯定有个疑问，上面那样实现不就是为了在外面获取fun1()里定义的变量a吗，我们用下面的代码也能获取啊！</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="keyword">var</span> a=<span class="number">100</span>;</div><div class="line"><span class="keyword">return</span> a;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> result=fun1();</div><div class="line"><span class="built_in">console</span>.log(result);</div></pre></td></tr></table></figure><p>其实不然，闭包不只是为了获取局部变量，更重要的作用是为了让局部变量一直保存在内存中，不被GC(垃圾回收器(garbage collection))回收。再来看下面的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="keyword">var</span> a=<span class="number">100</span>;</div><div class="line">add=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">a+=<span class="number">1</span>;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="keyword">return</span> a;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> result=fun1();</div><div class="line"><span class="built_in">console</span>.log(result());<span class="comment">//100</span></div><div class="line">add();</div><div class="line"><span class="built_in">console</span>.log(result());<span class="comment">//101</span></div><div class="line">add();</div><div class="line"><span class="built_in">console</span>.log(result());<span class="comment">//102</span></div></pre></td></tr></table></figure><p>上面有三句输出，100，101，102，每次执行了一次累加1的函数add(),由于a被闭包引用，所以不会被GC回收，其值一直保存在内存中，所以才会有如上的输出结果。</p><h3 id="不要滥用闭包"><a href="#不要滥用闭包" class="headerlink" title="不要滥用闭包"></a>不要滥用闭包</h3><p>由于闭包会常驻内存，所以大量使用闭包会消耗大量的内存，导致内存泄漏。当发生内存泄漏时，我们只有关闭浏览器，这些内存占用才会释放，关闭标签页是没有效果的。</p><h3 id="闭包的优点"><a href="#闭包的优点" class="headerlink" title="闭包的优点"></a>闭包的优点</h3><ul><li>1.让局部变量常驻内存</li><li>2.避免同名全局变量冲突</li><li>3.成员私有化<br>第一点和第二点比较好理解，对于第三点，先来一段代码：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj=(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="keyword">var</span> a=<span class="number">100</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">funB</span>(<span class="params"></span>)</span>&#123;</div><div class="line">a++;</div><div class="line"><span class="keyword">return</span> a;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">funC</span>(<span class="params"></span>)</span>&#123;</div><div class="line">a++;</div><div class="line"><span class="keyword">return</span> a;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> &#123;</div><div class="line">b:funB,</div><div class="line">c:funC</div><div class="line">&#125;</div><div class="line">&#125;)();</div><div class="line"><span class="built_in">console</span>.log(obj.b());<span class="comment">//101</span></div><div class="line"><span class="built_in">console</span>.log(obj.c());<span class="comment">//102</span></div></pre></td></tr></table></figure><p>这里就是直接将funB和funC方法付给一个匿名对象的成员，最后直接返回该匿名对象。</p><h3 id="闭包常见使用场景"><a href="#闭包常见使用场景" class="headerlink" title="闭包常见使用场景"></a>闭包常见使用场景</h3><p>以下实例展示一个使用闭包解决开发中经常遇到的一个问题。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"button1"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"button2"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"button3"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="javascript"><span class="keyword">var</span> btnList=<span class="built_in">document</span>.getElementsByTagName(<span class="string">"input"</span>);</span></div><div class="line"><span class="javascript"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;btnList.length;i++)&#123;</span></div><div class="line"><span class="javascript">btnList[i].onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="undefined">alert(i);</span></div><div class="line"><span class="undefined">&#125;;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined">&#125;;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p><p>当我们点击界面的三个按钮时，弹出的全是3，是不是觉得奇怪，因为我们的初衷是想第一个按钮弹出0，第二个弹出1，第三个弹出2。</p><p>会出现上面的结果，正是闭包惹的祸，由于<strong>btnList[i].onclick</strong>是属于函数<strong>window.onload</strong>之外的对象，他所引用的匿名函数引用了<strong>window.onload</strong>函数里的局部变量<strong>i</strong>，导致<strong>btnList[i].onclick</strong>函数形成一个闭包，i会常驻内存，等到用户点击按钮，这时候<strong>i</strong>的值已经三次<strong>i++</strong>操作（for循环三次），最终导致弹出的都是3。</p><p>那究竟怎样才能才能实现我们想要的效果呢，这时候还是要靠闭包，所谓解铃还需系铃人。我们对上面那段代码稍作修改，使用闭包来实现，下面提供两种实现方式。</p><ul><li>1.立即执行函数表达式</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"button1"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"button2"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"button3"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="javascript"><span class="keyword">var</span> btnList=<span class="built_in">document</span>.getElementsByTagName(<span class="string">"input"</span>);</span></div><div class="line"><span class="javascript"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;btnList.length;i++)&#123;</span></div><div class="line"><span class="javascript">(<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</span></div><div class="line"><span class="javascript">btnList[i].onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="undefined">alert(i);</span></div><div class="line"><span class="undefined">&#125;;</span></div><div class="line"><span class="undefined">&#125;)(i);</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined">&#125;;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><ul><li>2.闭包函数引用</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"button1"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"button2"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"button3"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript"><span class="keyword">var</span> btnClick=<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</span></div><div class="line"><span class="javascript"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="undefined">alert(i);</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="javascript"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="javascript"><span class="keyword">var</span> btnList=<span class="built_in">document</span>.getElementsByTagName(<span class="string">"input"</span>);</span></div><div class="line"><span class="javascript"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;btnList.length;i++)&#123;</span></div><div class="line"><span class="undefined">btnList[i].onclick=btnClick(i);</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined">&#125;;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>最后引用《javascript高级程序设计》书上对闭包的定义：<br><strong>闭包</strong>是指有权访问另一个函数作用域中的变量函数</p><h3 id="附：函数声明和函数表达式"><a href="#附：函数声明和函数表达式" class="headerlink" title="附：函数声明和函数表达式"></a>附：函数声明和函数表达式</h3><p>js中定义一个函数一般有两种方式：<strong>函数声明</strong>和<strong>函数表达式</strong><br>函数声明：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="comment">//do something</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>函数表达式：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fun1=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="comment">//do something</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这两种方式都可以在实际中应用，但是JS解析器对这两种实现方式的处理并不一样。<strong>JS解析器会在预解析阶段优先读取函数声明的代码，以确保函数能够被引用到；而对于函数表达式，只有在执行到相应的语句时才进行解析。</strong><br>再看下面两段代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">fun1();<span class="comment">//正常执行</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">alert(<span class="string">"这个是函数声明"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">fun2();<span class="comment">//报错：TypeError: fun2 is not a function</span></div><div class="line"><span class="keyword">var</span> fun2=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">alert(<span class="string">"这个是函数表达式"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>因为函数声明会被提升，所以第一段里面fun1的声明虽然写在调用代码后面，但其实他已经被提升到执行语句以前了。而对于第二段，虽然声明了变量fun2，fun2的定义也会被提升，但是并不会立即将代码里的匿名函数引用赋值给他，而是要执行到赋值语句的时候才会得到正确的引用，因此在执行<strong>fun2();</strong>语句的时候会报错。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;敌在暗，我在明&quot;&gt;&lt;a href=&quot;#敌在暗，我在明&quot; class=&quot;headerlink&quot; title=&quot;敌在暗，我在明&quot;&gt;&lt;/a&gt;敌在暗，我在明&lt;/h3&gt;&lt;p&gt;看电影的时候我们经常会看到这样的剧情，当敌暗，我在明时，我们的一举一动他们都了如指掌，我们对他们的情
      
    
    </summary>
    
      <category term="javascript" scheme="http://yangdage.github.io/categories/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo+Github一步两步搭建博客</title>
    <link href="http://yangdage.github.io/mark/mark/hexo-github.html"/>
    <id>http://yangdage.github.io/mark/mark/hexo-github.html</id>
    <published>2016-03-09T16:00:00.000Z</published>
    <updated>2016-04-20T04:05:51.609Z</updated>
    
    <content type="html"><![CDATA[<h3 id="NodeJS、NPM安装"><a href="#NodeJS、NPM安装" class="headerlink" title="NodeJS、NPM安装"></a>NodeJS、NPM安装</h3><p>由于Hexo是基于NodeJS的静态博客框架，首先我们必须要在机器上安装NodeJS运行环境。<br>到NodeJS<a href="https://nodejs.org/en/" target="_blank" rel="external">官网</a>下载好对应系统版本的安装文件，这里以Windows系统为例。<br>Windows下的NodeJS安装比较简单，下载好安装文件以后，双击运行一路next就好，中间注意选择安装到自己喜欢的路径下面。</p><p>NPM为NodeJS的插件管理器，就类似于我们系统里的应用商店，默认已经随NodeJS一起安装了。</p><h3 id="Git安装"><a href="#Git安装" class="headerlink" title="Git安装"></a>Git安装</h3><p>Git安装跟NodeJS安装一样简单，到Git的<a href="https://git-scm.com/download/" target="_blank" rel="external">官网</a>下载对应系统版本的最新安装文件，运行安装，一路next默认就好。</p><h3 id="github账号注册"><a href="#github账号注册" class="headerlink" title="github账号注册"></a>github账号注册</h3><p>到<a href="http://github.com" target="_blank" rel="external">github</a>上注册一个个人账号，已注册过的默默飘过。</p><h3 id="SSHKEY"><a href="#SSHKEY" class="headerlink" title="SSHKEY"></a>SSHKEY</h3><p>想要在自己本地机器上方便的上传/更新文件，我们需要在github上添加一个本机的SSH公钥。<br>首先我们在桌面空白出右键打开右键菜单选择<strong>Git Bash</strong>选项</p><p><img src="https://raw.githubusercontent.com/yangdage/images/master/20160401/20160401013051.png" alt="git bash"></p><p>输入下面的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa</div></pre></td></tr></table></figure><p>一路回车，如果之前已经生成过SSH Key的，中间有一步会询问是否进行覆盖操作，输入<strong>y</strong>就会覆盖重新生成一个新的SSH密钥对。</p><p>接下来我们到我们当前用户的用户目录下找到.ssh的文件夹，这个文件夹windows下默认是隐藏的，需要设置显示隐藏的项目。如果当前用户是Administrator，那么.ssh文件夹就在C:\Users\Administrator\目录下。</p><p><img src="https://raw.githubusercontent.com/yangdage/images/master/20160401/20160401012837.png" alt=".ssh dir"></p><p>使用文本编辑器打开id_rsa.pub文件，复制全部内容。</p><p>浏览器打开<a href="http://github.com" target="_blank" rel="external">github</a>，登录已注册过的账号，点击右上角的用户头像，会弹出下面的菜单项</p><p><img src="https://raw.githubusercontent.com/yangdage/images/master/20160401/20160401011320.png" alt="settings"></p><p>选择<strong>Settings</strong>选项进入设置页面，设置页面左边侧边栏有个<strong>SSH Keys</strong>菜单选项，我们点击打开。</p><p><img src="https://raw.githubusercontent.com/yangdage/images/master/20160401/20160401011421.png" alt="ssh keys"></p><p><img src="https://raw.githubusercontent.com/yangdage/images/master/20160401/20160401014113.png" alt="ssh keys"></p><p>点击New SSH key按钮，输入一个title，以及粘贴我们刚复制的id_rsa.pub文件内容到Key编辑框里，保存。</p><h3 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h3><p>快捷键<strong>win+r</strong>输入<strong>cmd</strong>打开命令行终端，执行以下命令安装hexo-cli和hexo。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm install hexo-cli -g</div><div class="line"></div><div class="line">npm install hexo --save</div></pre></td></tr></table></figure><p>如果上面的命令执行失败，或者较慢，我们可以替换npm的官方源到淘宝提供的国内镜像源，使用下面命令替换源。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure><h3 id="新建博客"><a href="#新建博客" class="headerlink" title="新建博客"></a>新建博客</h3><p>在喜欢的目录下创建一个blog文件夹，进入文件夹，在资源管理器地址栏输入<strong>cmd</strong>命令，可以快速的打开命令行终端，且路径已在当前目录。输入下面两个命令，创建一个博客项目。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo init</div><div class="line"></div><div class="line">npm install</div></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/yangdage/images/master/20160401/20160401015906.png" alt="hexo init"></p><p>创建完成以后我们看下文件夹下的文件和目录。</p><p><img src="https://raw.githubusercontent.com/yangdage/images/master/20160401/20160401020226.png" alt="hexo init"></p><p>下面简单说明下这些目录和文件的作用</p><ul><li>node_modules node插件文件夹</li><li>scaffolds 工具模板</li><li>source 博客资源</li><li>source/_posts 文章文件夹（存放会发布的博客文件）</li><li>themes 主题样式文件夹</li><li>themes/landscape 默认皮肤文件夹</li><li>_config.yml 全局配置文件</li><li>package.json node插件配置文件</li></ul><p>到这里我们博客项目就已经构建好了，现在我们本地启动服务可以查看下效果。</p><p>首先我们需要生成静态文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo generate</div></pre></td></tr></table></figure><p>上述命令也可以使用简写方式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo g</div></pre></td></tr></table></figure><p>控制台打印以下内容，说明生成成功。<br><img src="https://raw.githubusercontent.com/yangdage/images/master/20160401/20160401021857.png" alt="hexo generate"></p><p>生成静态文件后，就可以启动服务了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo server</div></pre></td></tr></table></figure><p>也可以使用简写</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo s</div></pre></td></tr></table></figure><p>hexo启动的服务默认端口为<strong>4000</strong>，我们可以打开浏览器，地址栏输入<strong> <a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a> </strong>访问查看效果。</p><p><img src="https://raw.githubusercontent.com/yangdage/images/master/20160401/20160401022212.png" alt="hexo hello world"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;NodeJS、NPM安装&quot;&gt;&lt;a href=&quot;#NodeJS、NPM安装&quot; class=&quot;headerlink&quot; title=&quot;NodeJS、NPM安装&quot;&gt;&lt;/a&gt;NodeJS、NPM安装&lt;/h3&gt;&lt;p&gt;由于Hexo是基于NodeJS的静态博客框架，首先我们必须要
      
    
    </summary>
    
      <category term="mark" scheme="http://yangdage.github.io/categories/mark/"/>
    
    
  </entry>
  
  <entry>
    <title>API接口文档设计</title>
    <link href="http://yangdage.github.io/mark/mark/api-design.html"/>
    <id>http://yangdage.github.io/mark/mark/api-design.html</id>
    <published>2016-03-03T16:00:00.000Z</published>
    <updated>2016-04-20T04:05:51.608Z</updated>
    
    <content type="html"><![CDATA[<h3 id="功能说明"><a href="#功能说明" class="headerlink" title="功能说明"></a>功能说明</h3><p>简单说明接口实现的相关功能，使用场景等等。</p><h3 id="调用说明"><a href="#调用说明" class="headerlink" title="调用说明"></a>调用说明</h3><h4 id="请求地址"><a href="#请求地址" class="headerlink" title="请求地址"></a>请求地址</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://www.xxx.com/api/demo</div></pre></td></tr></table></figure><h4 id="请求方式"><a href="#请求方式" class="headerlink" title="请求方式"></a>请求方式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GET/POST</div></pre></td></tr></table></figure><h4 id="请求头信息"><a href="#请求头信息" class="headerlink" title="请求头信息"></a>请求头信息</h4><p>一些需要设置请求头的需要加上特殊说明。<br>例如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Content-Type：application/json</div></pre></td></tr></table></figure></p><h4 id="请求参数"><a href="#请求参数" class="headerlink" title="请求参数"></a>请求参数</h4><p>GET请求方式的列表方式列出请求所需参数，包含说明是否为必传字段。</p><table><thead><tr><th>参数</th><th>类型</th><th>说明</th><th>必传</th></tr></thead><tbody><tr><td>userId</td><td>int</td><td>用户ID</td><td>Y</td></tr><tr><td>timestamp</td><td>long</td><td>时间戳(毫秒值)</td><td>N</td></tr></tbody></table><p>POST方式需要传json参数的列出json样例格式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line"><span class="string">"userId"</span>:<span class="number">123</span>,<span class="comment">//用户ID，必传</span></div><div class="line"><span class="string">"timestamp"</span>:<span class="number">3887717000</span><span class="comment">//时间戳(毫秒值)，非必传</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="返回"><a href="#返回" class="headerlink" title="返回"></a>返回</h3><p>一般接口返回JSON或XML格式的数据，需列出相关返回格式样例数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line"><span class="string">"status"</span>: <span class="number">0</span>,</div><div class="line"><span class="string">"data"</span>:&#123;</div><div class="line"><span class="string">"userId"</span>:<span class="number">123</span>,<span class="comment">//用户ID</span></div><div class="line"><span class="string">"userName"</span>:<span class="string">"张三"</span><span class="comment">//用户名</span></div><div class="line">&#125;,</div><div class="line"><span class="string">"msg"</span>: <span class="string">"success"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Result</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">status</span>&gt;</span>0<span class="tag">&lt;/<span class="name">status</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">msg</span>&gt;</span>success<span class="tag">&lt;/<span class="name">msg</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">data</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">userId</span> <span class="attr">value</span>=<span class="string">"123"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">userName</span> <span class="attr">value</span>=<span class="string">"张三"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">data</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Result</span>&gt;</span></div></pre></td></tr></table></figure><h4 id="返回状态"><a href="#返回状态" class="headerlink" title="返回状态"></a>返回状态</h4><p>必要时需要列出所有返回状态对应的数据格式。</p><table><thead><tr><th>状态值</th><th>状态说明</th></tr></thead><tbody><tr><td>0</td><td>成功</td></tr><tr><td>500</td><td>系统异常</td></tr><tr><td>404</td><td>请求不存在</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;功能说明&quot;&gt;&lt;a href=&quot;#功能说明&quot; class=&quot;headerlink&quot; title=&quot;功能说明&quot;&gt;&lt;/a&gt;功能说明&lt;/h3&gt;&lt;p&gt;简单说明接口实现的相关功能，使用场景等等。&lt;/p&gt;
&lt;h3 id=&quot;调用说明&quot;&gt;&lt;a href=&quot;#调用说明&quot; class=
      
    
    </summary>
    
      <category term="mark" scheme="http://yangdage.github.io/categories/mark/"/>
    
    
  </entry>
  
  <entry>
    <title>初识NSQ分布式实时消息架构</title>
    <link href="http://yangdage.github.io/mark/mark/nsq-start.html"/>
    <id>http://yangdage.github.io/mark/mark/nsq-start.html</id>
    <published>2015-08-25T16:00:00.000Z</published>
    <updated>2016-04-20T04:05:51.610Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-NSQ知识普及"><a href="#1-NSQ知识普及" class="headerlink" title="1.NSQ知识普及"></a>1.NSQ知识普及</h3><p>NSQ是一个基于Go语言的开源的分布式实时消息平台，他的代码托管在GitHub上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://github.com/nsqio/nsq</div></pre></td></tr></table></figure><p>NSQ可用于大规模系统的实时消息服务，它的设计目标是为在分布式环境下提供一个强大的去除中心化的分布式服务架构，可以每天处理数以亿计的实时消息。NSQ的优点是无单点故障、故障容错、高可用性和信息传递的高可靠性。NSQ安装部署简单，容易水平扩展，目前已有很多公司都是采用其作为自身企业内部的实时消息服务。而且它的灵活性很强，支持很多种协议。官方直接提供了拆箱可用的Go库和Python库。好，其他的就不废话了，随便搜索下NSQ相关的博文或者去NSQ的官方网站了解更详细的信息吧。</p><h3 id="2-NSQ的四大组件"><a href="#2-NSQ的四大组件" class="headerlink" title="2.NSQ的四大组件"></a>2.NSQ的四大组件</h3><p>nsqlookupd：管理nsqd节点拓扑信息并提供最终一致性的发现服务的守护进程</p><p>nsqd：负责接收、排队、转发消息到客户端的守护进程，并且定时向nsqlookupd服务发送心跳</p><p>nsqadmin：nsq的web统计界面，可实时查看集群的统计数据和执行一些管理任务 </p><p>utilities：常见基础功能、数据流处理工具，如nsq_stat、nsq_tail、nsq_to_file、nsq_to_http、nsq_to_nsq、to_nsq </p><h3 id="3-NSQ依赖"><a href="#3-NSQ依赖" class="headerlink" title="3.NSQ依赖"></a>3.NSQ依赖</h3><h4 id="3-1-GO：NSQ是有GO语言开发的，必不可少的需要事先安装配置好GO相关的环境变量信息。"><a href="#3-1-GO：NSQ是有GO语言开发的，必不可少的需要事先安装配置好GO相关的环境变量信息。" class="headerlink" title="3.1 GO：NSQ是有GO语言开发的，必不可少的需要事先安装配置好GO相关的环境变量信息。"></a>3.1 GO：NSQ是有GO语言开发的，必不可少的需要事先安装配置好GO相关的环境变量信息。</h4><p>（i）首先自然是去官网找到对应系统的较新较稳定的版本安装包，中文站地址：<a href="http://golangtc.com/download" target="_blank" rel="external">http://golangtc.com/download</a></p><p>由于其官方地址在国外，下载速度可能比较慢，推荐使用本地下载的链接进行下载。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget http://golangtc.com/static/go/go1.5beta1.linux-amd64.tar.gz</div></pre></td></tr></table></figure><p>（ii）下载完安装包后解压并且复制到/usr/local/目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">tar zxvf go1.5beta1.linux-amd64.tar.gz</div><div class="line"></div><div class="line">mv go /usr/<span class="built_in">local</span></div></pre></td></tr></table></figure><p>（iii）GO环境变量配置</p><p>打开环境变量配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vim /etc/profile</div></pre></td></tr></table></figure><p>然后在文件的最后追加以下配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> GOROOT=/usr/<span class="built_in">local</span>/go</div><div class="line"><span class="built_in">export</span> GOPATH=\<span class="variable">$GOROOT</span>/bin</div><div class="line"><span class="built_in">export</span> PATH=\<span class="variable">$PATH</span>:\<span class="variable">$GOPATH</span></div></pre></td></tr></table></figure><p>配置好环境变量后再让它马上生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">source</span> /etc/profile</div></pre></td></tr></table></figure><p>最后查看是否安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">go version</div></pre></td></tr></table></figure><p>如果控制台打印出了对应的版本号信息，那就恭喜你了，等等。。。别急，这才刚刚开始。</p><h4 id="3-2-GIT：因为稍候需要从github上获取NSQ的安装文件"><a href="#3-2-GIT：因为稍候需要从github上获取NSQ的安装文件" class="headerlink" title="3.2 GIT：因为稍候需要从github上获取NSQ的安装文件"></a>3.2 GIT：因为稍候需要从github上获取NSQ的安装文件</h4><p>直接命令安装就好</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install git</div></pre></td></tr></table></figure><h3 id="4-安装NSQ"><a href="#4-安装NSQ" class="headerlink" title="4.安装NSQ"></a>4.安装NSQ</h3><p>命令行直接执行下面的命令安装NSQ</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">go get github.com/kr/godep</div><div class="line">go get github.com/bmizerany/assert</div><div class="line">godep get github.com/bitly/nsq/...</div></pre></td></tr></table></figure><p><strong>注：godev为GO的语言依赖管理包，assert为GO的测试框架，至于最后一个嘛，自己猜吧</strong></p><p>到此，NSQ就安装好了，接下来就可以一起愉快的玩耍了</p><h3 id="5-启动部署和测试"><a href="#5-启动部署和测试" class="headerlink" title="5.启动部署和测试"></a>5.启动部署和测试</h3><p>这节的内容就直接翻译了官网的原文了，有兴趣的可以自己去看下</p><p><a href="http://nsq.io/overview/quick_start.html" target="_blank" rel="external">http://nsq.io/overview/quick_start.html</a></p><h4 id="5-1-打开一个终端，启动nsqlookupd"><a href="#5-1-打开一个终端，启动nsqlookupd" class="headerlink" title="5.1 打开一个终端，启动nsqlookupd"></a>5.1 打开一个终端，启动nsqlookupd</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nsqlookupd</div></pre></td></tr></table></figure><h4 id="5-2-再打开一个终端，启动nsq"><a href="#5-2-再打开一个终端，启动nsq" class="headerlink" title="5.2 再打开一个终端，启动nsq"></a>5.2 再打开一个终端，启动nsq</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nsqd --lookupd-tcp-address=127.0.0.1:4160</div></pre></td></tr></table></figure><h4 id="5-3-再打开一个终端，启动nsqadmin"><a href="#5-3-再打开一个终端，启动nsqadmin" class="headerlink" title="5.3 再打开一个终端，启动nsqadmin"></a>5.3 再打开一个终端，启动nsqadmin</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nsqadmin --lookupd-http-address=127.0.0.1:4161</div></pre></td></tr></table></figure><h4 id="5-4-创建一个topic并且发布一条消息，由于nsq支持http协议发布消息，我们可以直接使用curl命令。"><a href="#5-4-创建一个topic并且发布一条消息，由于nsq支持http协议发布消息，我们可以直接使用curl命令。" class="headerlink" title="5.4 创建一个topic并且发布一条消息，由于nsq支持http协议发布消息，我们可以直接使用curl命令。"></a>5.4 创建一个topic并且发布一条消息，由于nsq支持http协议发布消息，我们可以直接使用curl命令。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -d <span class="string">'hello world 1'</span> <span class="string">'http://127.0.0.1:4151/put?topic=test'</span></div></pre></td></tr></table></figure><h4 id="5-5-再开一个终端，-开了好多终端了，来处理消息数据流，将消息写入-tmp文件加下的日志文件-文件名默认由主题topic-主机-日期时间戳组成。"><a href="#5-5-再开一个终端，-开了好多终端了，来处理消息数据流，将消息写入-tmp文件加下的日志文件-文件名默认由主题topic-主机-日期时间戳组成。" class="headerlink" title="5.5 再开一个终端，@~@!!!,开了好多终端了，来处理消息数据流，将消息写入/tmp文件加下的日志文件,文件名默认由主题topic+主机+日期时间戳组成。"></a>5.5 再开一个终端，@~@!!!,开了好多终端了，来处理消息数据流，将消息写入/tmp文件加下的日志文件,文件名默认由主题topic+主机+日期时间戳组成。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nsq_to_file --topic=<span class="built_in">test</span> --output-dir=/tmp --lookupd-http-address=127.0.0.1:4161</div></pre></td></tr></table></figure><h4 id="5-6-我们再发布两条消息，看看日志文件中的变化。"><a href="#5-6-我们再发布两条消息，看看日志文件中的变化。" class="headerlink" title="5.6 我们再发布两条消息，看看日志文件中的变化。"></a>5.6 我们再发布两条消息，看看日志文件中的变化。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">curl -d <span class="string">'hello world 2'</span> <span class="string">'http://127.0.0.1:4151/put?topic=test'</span></div><div class="line">curl -d <span class="string">'hello world 3'</span> <span class="string">'http://127.0.0.1:4151/put?topic=test'</span></div></pre></td></tr></table></figure><h4 id="5-7特别说明"><a href="#5-7特别说明" class="headerlink" title="5.7特别说明"></a>5.7特别说明</h4><p>需要特别注意的是这里的nsq_to_file客户端进程并不确定消息什么时候会发布，所以它会在连接没有断开的情况下定时去nsqlookupd中检索消息，确保消息不丢失。</p><p><img src="https://raw.githubusercontent.com/yangdage/images/master/20150830/20150830214444426.png" alt="nsq start"></p><p><img src="https://raw.githubusercontent.com/yangdage/images/master/20150830/20150830214529061.png" alt="nsq start"></p><p><img src="https://raw.githubusercontent.com/yangdage/images/master/20150830/20150830214544464.png" alt="nsq start"></p><h3 id="6-nsqadmin的web统计"><a href="#6-nsqadmin的web统计" class="headerlink" title="6.nsqadmin的web统计"></a>6.nsqadmin的web统计</h3><p><img src="https://raw.githubusercontent.com/yangdage/images/master/20150830/20150830214340984.png" alt="nsq start"></p><p>nsq自身提供了一个便于查看和操作的web界面，可以实时查看统计信息和执行一些管理任务。</p><h4 id="6-1浏览器打开nsqadmin的web页"><a href="#6-1浏览器打开nsqadmin的web页" class="headerlink" title="6.1浏览器打开nsqadmin的web页"></a>6.1浏览器打开nsqadmin的web页</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://192.168.1.111:4171/</div></pre></td></tr></table></figure><p>由于默认情况下linux系统，nsqadmin的默认端口4171限制了对外访问，所以我们要打开4171端口的路由访问限制，便于外部系统的浏览器访问。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iptables -A  INPUT -p tcp --dport 4171 -j ACCEPT</div></pre></td></tr></table></figure><ul><li>参数讲解：<br>–A 添加一条规则的意思<br>–p 指定是什么协议，这里是tcp协议<br>–dport 就是目标端口，当数据从外部进入服务器为目标端口<br>–sport 数据从服务器出去，则为数据源端口使用<br>–j 就是指定是 ACCEPT -接收 或者 DROP 不接收</li></ul><h4 id="6-2-Topics界面"><a href="#6-2-Topics界面" class="headerlink" title="6.2 Topics界面"></a>6.2 Topics界面</h4><p><img src="https://raw.githubusercontent.com/yangdage/images/master/20150830/20150830213809966.png" alt="nsq start"></p><p>这里详细的列出了所有的发布的topic主题列表，可以点进去查看单个主题的详细统计信息。还可以管理主题，比如清空主题的消息队列，删除主题，暂停主题等等。</p><h4 id="6-3-Nodes节点列表"><a href="#6-3-Nodes节点列表" class="headerlink" title="6.3 Nodes节点列表"></a>6.3 Nodes节点列表</h4><p><img src="https://raw.githubusercontent.com/yangdage/images/master/20150830/20150830213848425.png" alt="nsq start"></p><p>这个页面可以查看当前nsqlookupd协调管理的节点列表，以及一些连接信息，比如端口，连接数，主题和主题数量等等。</p><h4 id="6-4-Counter消息计数页"><a href="#6-4-Counter消息计数页" class="headerlink" title="6.4 Counter消息计数页"></a>6.4 Counter消息计数页</h4><p><img src="https://raw.githubusercontent.com/yangdage/images/master/20150830/20150830214013450.png" alt="nsq start"></p><p>这个页面最简洁，中间一个硕大的计数牌，展示已经处理过的消息数目。</p><h4 id="6-5-Lookup界面"><a href="#6-5-Lookup界面" class="headerlink" title="6.5 Lookup界面"></a>6.5 Lookup界面</h4><p><img src="https://raw.githubusercontent.com/yangdage/images/master/20150830/20150830214233531.png" alt="nsq start"></p><p>这里我们可以创建消息主题和消息通道。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-NSQ知识普及&quot;&gt;&lt;a href=&quot;#1-NSQ知识普及&quot; class=&quot;headerlink&quot; title=&quot;1.NSQ知识普及&quot;&gt;&lt;/a&gt;1.NSQ知识普及&lt;/h3&gt;&lt;p&gt;NSQ是一个基于Go语言的开源的分布式实时消息平台，他的代码托管在GitHub上。&lt;
      
    
    </summary>
    
      <category term="mark" scheme="http://yangdage.github.io/categories/mark/"/>
    
    
  </entry>
  
  <entry>
    <title>Windows下端口占用程序查询</title>
    <link href="http://yangdage.github.io/mark/mark/windows-port-used.html"/>
    <id>http://yangdage.github.io/mark/mark/windows-port-used.html</id>
    <published>2015-05-15T16:00:00.000Z</published>
    <updated>2016-04-20T04:05:51.612Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-打开命令行工具"><a href="#1-打开命令行工具" class="headerlink" title="1.打开命令行工具"></a>1.打开命令行工具</h3><p>输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">netstat -aon|findstr 8082</div></pre></td></tr></table></figure><p>可以看到类似以下的输出，最后一列为占用端口的程序的进程id</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">TCP    0.0.0.0:8082           0.0.0.0:0              LISTENING       2480</div><div class="line">TCP    [::]:8082              [::]:0                 LISTENING       2480</div></pre></td></tr></table></figure><h3 id="2-根据进程ID查询程序信息"><a href="#2-根据进程ID查询程序信息" class="headerlink" title="2.根据进程ID查询程序信息"></a>2.根据进程ID查询程序信息</h3><p>输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tasklist|findstr 2480</div></pre></td></tr></table></figure><p>控制台会输出该进程的程序信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java.exe                      2480 Console                    3    253,168 K</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-打开命令行工具&quot;&gt;&lt;a href=&quot;#1-打开命令行工具&quot; class=&quot;headerlink&quot; title=&quot;1.打开命令行工具&quot;&gt;&lt;/a&gt;1.打开命令行工具&lt;/h3&gt;&lt;p&gt;输入以下命令：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;
      
    
    </summary>
    
      <category term="mark" scheme="http://yangdage.github.io/categories/mark/"/>
    
    
  </entry>
  
  <entry>
    <title>sublime关闭分组</title>
    <link href="http://yangdage.github.io/mark/mark/sublime%E5%85%B3%E9%97%AD%E5%88%86%E7%BB%84.html"/>
    <id>http://yangdage.github.io/mark/mark/sublime关闭分组.html</id>
    <published>2015-04-19T16:00:00.000Z</published>
    <updated>2016-04-20T04:05:51.611Z</updated>
    
    <content type="html"><![CDATA[<h3 id="打开分组"><a href="#打开分组" class="headerlink" title="打开分组"></a>打开分组</h3><p>可以使用快捷键打开多个分组，常同时编辑多个文件，或比较两个文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alt+shilt+数字</div></pre></td></tr></table></figure><p>其中数字可以是1-9任意数字，一般最多只会开启3个分组，即数字大于等于3时都是开启3个分组。</p><h3 id="关闭分组"><a href="#关闭分组" class="headerlink" title="关闭分组"></a>关闭分组</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alt+shift+1</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;打开分组&quot;&gt;&lt;a href=&quot;#打开分组&quot; class=&quot;headerlink&quot; title=&quot;打开分组&quot;&gt;&lt;/a&gt;打开分组&lt;/h3&gt;&lt;p&gt;可以使用快捷键打开多个分组，常同时编辑多个文件，或比较两个文件。&lt;/p&gt;
&lt;figure class=&quot;highlight 
      
    
    </summary>
    
      <category term="mark" scheme="http://yangdage.github.io/categories/mark/"/>
    
    
  </entry>
  
</feed>
